{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $species = GetIntrinsic('%Symbol.species%', true);\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar ArrayCreate = require('./ArrayCreate');\n\nvar Get = require('./Get');\n\nvar IsArray = require('./IsArray');\n\nvar IsConstructor = require('./IsConstructor');\n\nvar IsIntegralNumber = require('./IsIntegralNumber');\n\nvar Type = require('./Type'); // https://ecma-international.org/ecma-262/12.0/#sec-arrayspeciescreate\n\n\nmodule.exports = function ArraySpeciesCreate(originalArray, length) {\n  if (!IsIntegralNumber(length) || length < 0) {\n    throw new $TypeError('Assertion failed: length must be an integer >= 0');\n  }\n\n  var isArray = IsArray(originalArray);\n\n  if (!isArray) {\n    return ArrayCreate(length);\n  }\n\n  var C = Get(originalArray, 'constructor'); // TODO: figure out how to make a cross-realm normal Array, a same-realm Array\n  // if (IsConstructor(C)) {\n  // \tif C is another realm's Array, C = undefined\n  // \tObject.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?\n  // }\n\n  if ($species && Type(C) === 'Object') {\n    C = Get(C, $species);\n\n    if (C === null) {\n      C = void 0;\n    }\n  }\n\n  if (typeof C === 'undefined') {\n    return ArrayCreate(length);\n  }\n\n  if (!IsConstructor(C)) {\n    throw new $TypeError('C must be a constructor');\n  }\n\n  return new C(length); // Construct(C, length);\n};","map":{"version":3,"names":["GetIntrinsic","require","$species","$TypeError","ArrayCreate","Get","IsArray","IsConstructor","IsIntegralNumber","Type","module","exports","ArraySpeciesCreate","originalArray","length","isArray","C"],"sources":["/Users/sebas/Desktop/robofriends-testing/node_modules/es-abstract/2021/ArraySpeciesCreate.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $species = GetIntrinsic('%Symbol.species%', true);\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar ArrayCreate = require('./ArrayCreate');\nvar Get = require('./Get');\nvar IsArray = require('./IsArray');\nvar IsConstructor = require('./IsConstructor');\nvar IsIntegralNumber = require('./IsIntegralNumber');\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/12.0/#sec-arrayspeciescreate\n\nmodule.exports = function ArraySpeciesCreate(originalArray, length) {\n\tif (!IsIntegralNumber(length) || length < 0) {\n\t\tthrow new $TypeError('Assertion failed: length must be an integer >= 0');\n\t}\n\n\tvar isArray = IsArray(originalArray);\n\tif (!isArray) {\n\t\treturn ArrayCreate(length);\n\t}\n\n\tvar C = Get(originalArray, 'constructor');\n\t// TODO: figure out how to make a cross-realm normal Array, a same-realm Array\n\t// if (IsConstructor(C)) {\n\t// \tif C is another realm's Array, C = undefined\n\t// \tObject.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?\n\t// }\n\tif ($species && Type(C) === 'Object') {\n\t\tC = Get(C, $species);\n\t\tif (C === null) {\n\t\t\tC = void 0;\n\t\t}\n\t}\n\n\tif (typeof C === 'undefined') {\n\t\treturn ArrayCreate(length);\n\t}\n\tif (!IsConstructor(C)) {\n\t\tthrow new $TypeError('C must be a constructor');\n\t}\n\treturn new C(length); // Construct(C, length);\n};\n\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,QAAQ,GAAGF,YAAY,CAAC,kBAAD,EAAqB,IAArB,CAA3B;AACA,IAAIG,UAAU,GAAGH,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAII,WAAW,GAAGH,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAII,GAAG,GAAGJ,OAAO,CAAC,OAAD,CAAjB;;AACA,IAAIK,OAAO,GAAGL,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIM,aAAa,GAAGN,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIO,gBAAgB,GAAGP,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIQ,IAAI,GAAGR,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAS,MAAM,CAACC,OAAP,GAAiB,SAASC,kBAAT,CAA4BC,aAA5B,EAA2CC,MAA3C,EAAmD;EACnE,IAAI,CAACN,gBAAgB,CAACM,MAAD,CAAjB,IAA6BA,MAAM,GAAG,CAA1C,EAA6C;IAC5C,MAAM,IAAIX,UAAJ,CAAe,kDAAf,CAAN;EACA;;EAED,IAAIY,OAAO,GAAGT,OAAO,CAACO,aAAD,CAArB;;EACA,IAAI,CAACE,OAAL,EAAc;IACb,OAAOX,WAAW,CAACU,MAAD,CAAlB;EACA;;EAED,IAAIE,CAAC,GAAGX,GAAG,CAACQ,aAAD,EAAgB,aAAhB,CAAX,CAVmE,CAWnE;EACA;EACA;EACA;EACA;;EACA,IAAIX,QAAQ,IAAIO,IAAI,CAACO,CAAD,CAAJ,KAAY,QAA5B,EAAsC;IACrCA,CAAC,GAAGX,GAAG,CAACW,CAAD,EAAId,QAAJ,CAAP;;IACA,IAAIc,CAAC,KAAK,IAAV,EAAgB;MACfA,CAAC,GAAG,KAAK,CAAT;IACA;EACD;;EAED,IAAI,OAAOA,CAAP,KAAa,WAAjB,EAA8B;IAC7B,OAAOZ,WAAW,CAACU,MAAD,CAAlB;EACA;;EACD,IAAI,CAACP,aAAa,CAACS,CAAD,CAAlB,EAAuB;IACtB,MAAM,IAAIb,UAAJ,CAAe,yBAAf,CAAN;EACA;;EACD,OAAO,IAAIa,CAAJ,CAAMF,MAAN,CAAP,CA7BmE,CA6B7C;AACtB,CA9BD"},"metadata":{},"sourceType":"script"}