{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _nearley = require('nearley');\n\nvar _grammar = require('./grammar');\n\nvar _grammar2 = _interopRequireDefault(_grammar);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*:: import type {\n  CombinatorTokenType,\n  SelectorTokenType\n} from './types';*/\n// @flow\n\n\nexports.default = function () {\n  var parse = function parse(selector\n  /*: string*/\n  )\n  /*: Array<SelectorTokenType | CombinatorTokenType>*/\n  {\n    var parser = new _nearley.Parser(_grammar2.default.ParserRules, _grammar2.default.ParserStart);\n    var results = parser.feed(selector).results;\n\n    if (results.length === 0) {\n      throw new Error('Found no parsings.');\n    }\n\n    if (results.length > 1) {\n      throw new Error('Ambiguous results.');\n    }\n\n    return results[0];\n  };\n\n  return {\n    parse: parse\n  };\n};","map":{"version":3,"mappings":";;;;;;AAEA;;AAOA;;;;;;;;;;;;;AATA;;;kBAWe,YAAM;EACnB,IAAMA,QAAQ,SAARA,KAAQ,CAACC;EAAD;EAAA;EAAA;EAAsE;IAClF,IAAMC,SAAS,oBAAWC,kBAAQC,WAAnB,EAAgCD,kBAAQE,WAAxC,CAAf;IAEA,IAAMC,UAAUJ,OAAOK,IAAPL,CAAYD,QAAZC,EAAsBI,OAAtC;;IAEA,IAAIA,QAAQE,MAARF,KAAmB,CAAvB,EAA0B;MACxB,MAAM,IAAIG,KAAJ,CAAU,oBAAV,CAAN;IACD;;IAED,IAAIH,QAAQE,MAARF,GAAiB,CAArB,EAAwB;MACtB,MAAM,IAAIG,KAAJ,CAAU,oBAAV,CAAN;IACD;;IAED,OAAOH,QAAQ,CAARA,CAAP;EAbF;;EAgBA,OAAO;IACLN;EADK,CAAP","names":["parse","selector","parser","_grammar2","ParserRules","ParserStart","results","feed","length","Error"],"sources":["/Users/sebas/Desktop/robofriends-testing/node_modules/rst-selector-parser/src/createParser.js"],"sourcesContent":["// @flow\n\nimport {\n  Parser\n} from 'nearley';\nimport type {\n  CombinatorTokenType,\n  SelectorTokenType\n} from './types';\nimport grammar from './grammar';\n\nexport default () => {\n  const parse = (selector: string): Array<SelectorTokenType | CombinatorTokenType> => {\n    const parser = new Parser(grammar.ParserRules, grammar.ParserStart);\n\n    const results = parser.feed(selector).results;\n\n    if (results.length === 0) {\n      throw new Error('Found no parsings.');\n    }\n\n    if (results.length > 1) {\n      throw new Error('Ambiguous results.');\n    }\n\n    return results[0];\n  };\n\n  return {\n    parse\n  };\n};\n"]},"metadata":{},"sourceType":"script"}