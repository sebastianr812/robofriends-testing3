{"ast":null,"code":"'use strict'; // Generated automatically by nearley\n// http://github.com/Hardmath123/nearley\n\n(function () {\n  function id(x) {\n    return x[0];\n  }\n\n  var flattenDeep = require('lodash.flattendeep');\n\n  var appendItem = function appendItem(a, b) {\n    return function (d) {\n      return d[a].concat([d[b]]);\n    };\n  };\n\n  var appendItemChar = function appendItemChar(a, b) {\n    return function (d) {\n      return d[a].concat(d[b]);\n    };\n  };\n\n  var flatten = function flatten(d) {\n    d = d.filter(function (r) {\n      return r !== null;\n    });\n    return flattenDeep(d);\n  };\n\n  var combinatorMap = {\n    ' ': 'descendantCombinator',\n    '+': 'adjacentSiblingCombinator',\n    '>': 'childCombinator',\n    '~': 'generalSiblingCombinator'\n  };\n\n  var concatUsingCombinator = function concatUsingCombinator(d) {\n    return (Array.isArray(d[0]) ? d[0] : [d[0]]).concat({\n      type: combinatorMap[d[2]]\n    }).concat(d[4]);\n  };\n\n  var parseAsNumber = function parseAsNumber(d, i, reject) {\n    var joined = flattenDeep(d).join('');\n    var parsed = parseFloat(joined);\n\n    if (isNaN(parsed)) {\n      return reject;\n    }\n\n    return parsed;\n  };\n\n  var parseAsBoolean = function parseAsBoolean(d, i, reject) {\n    if (d[0] === 'true') return true;\n    if (d[0] === 'false') return false;\n    return reject;\n  };\n\n  var parseFalsyPrimitive = function parseFalsyPrimitive(d, i, reject) {\n    if (d[0] === 'NaN') return NaN;\n    if (d[0] === 'undefined') return undefined;\n    if (d[0] === 'null') return null;\n    return reject;\n  };\n\n  var grammar = {\n    Lexer: undefined,\n    ParserRules: [{\n      \"name\": \"combinator\",\n      \"symbols\": [\"selector\"]\n    }, {\n      \"name\": \"combinator\",\n      \"symbols\": [\"combinator\", \"_\", /[>+~ ]/, \"_\", \"selector\"],\n      \"postprocess\": concatUsingCombinator\n    }, {\n      \"name\": \"selector\",\n      \"symbols\": [\"selectorBody\"],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'selector',\n          body: d[0]\n        };\n      }\n    }, {\n      \"name\": \"selectorBody$ebnf$1\",\n      \"symbols\": [\"typeSelector\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"selectorBody$ebnf$1\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"selectorBody$ebnf$2\",\n      \"symbols\": []\n    }, {\n      \"name\": \"selectorBody$ebnf$2\",\n      \"symbols\": [\"selectorBody$ebnf$2\", \"simpleSelector\"],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"selectorBody\",\n      \"symbols\": [\"selectorBody$ebnf$1\", \"selectorBody$ebnf$2\"],\n      \"postprocess\": function postprocess(d, i, reject) {\n        var selectors = flatten(d);\n        if (!selectors.length) return reject;\n        return selectors;\n      }\n    }, {\n      \"name\": \"selectorBody$ebnf$3\",\n      \"symbols\": []\n    }, {\n      \"name\": \"selectorBody$ebnf$3\",\n      \"symbols\": [\"selectorBody$ebnf$3\", \"simpleSelector\"],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"selectorBody\",\n      \"symbols\": [\"universalSelector\", \"selectorBody$ebnf$3\"],\n      \"postprocess\": flatten\n    }, {\n      \"name\": \"simpleSelector\",\n      \"symbols\": [\"idSelector\"]\n    }, {\n      \"name\": \"simpleSelector\",\n      \"symbols\": [\"classSelector\"]\n    }, {\n      \"name\": \"simpleSelector\",\n      \"symbols\": [\"attributeValueSelector\"]\n    }, {\n      \"name\": \"simpleSelector\",\n      \"symbols\": [\"attributePresenceSelector\"]\n    }, {\n      \"name\": \"simpleSelector\",\n      \"symbols\": [\"pseudoClassSelector\"]\n    }, {\n      \"name\": \"simpleSelector\",\n      \"symbols\": [\"pseudoElementSelector\"]\n    }, {\n      \"name\": \"typeSelector\",\n      \"symbols\": [\"attributeName\"],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'typeSelector',\n          name: d[0]\n        };\n      }\n    }, {\n      \"name\": \"className$ebnf$1\",\n      \"symbols\": [{\n        \"literal\": \"-\"\n      }],\n      \"postprocess\": id\n    }, {\n      \"name\": \"className$ebnf$1\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"className$ebnf$2\",\n      \"symbols\": []\n    }, {\n      \"name\": \"className$ebnf$2\",\n      \"symbols\": [\"className$ebnf$2\", /[_a-zA-Z0-9-]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"className\",\n      \"symbols\": [\"className$ebnf$1\", /[_a-zA-Z]/, \"className$ebnf$2\"],\n      \"postprocess\": function postprocess(d) {\n        return (d[0] || '') + d[1] + d[2].join('');\n      }\n    }, {\n      \"name\": \"attributeName$ebnf$1\",\n      \"symbols\": []\n    }, {\n      \"name\": \"attributeName$ebnf$1\",\n      \"symbols\": [\"attributeName$ebnf$1\", /[_a-zA-Z()0-9-]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"attributeName\",\n      \"symbols\": [/[_a-z()A-Z]/, \"attributeName$ebnf$1\"],\n      \"postprocess\": function postprocess(d) {\n        return d[0] + d[1].join('');\n      }\n    }, {\n      \"name\": \"classSelector\",\n      \"symbols\": [{\n        \"literal\": \".\"\n      }, \"className\"],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'classSelector',\n          name: d[1]\n        };\n      }\n    }, {\n      \"name\": \"idSelector\",\n      \"symbols\": [{\n        \"literal\": \"#\"\n      }, \"attributeName\"],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'idSelector',\n          name: d[1]\n        };\n      }\n    }, {\n      \"name\": \"universalSelector\",\n      \"symbols\": [{\n        \"literal\": \"*\"\n      }],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'universalSelector'\n        };\n      }\n    }, {\n      \"name\": \"attributePresenceSelector\",\n      \"symbols\": [{\n        \"literal\": \"[\"\n      }, \"attributeName\", {\n        \"literal\": \"]\"\n      }],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'attributePresenceSelector',\n          name: d[1]\n        };\n      }\n    }, {\n      \"name\": \"attributeOperator\",\n      \"symbols\": [{\n        \"literal\": \"=\"\n      }]\n    }, {\n      \"name\": \"attributeOperator$string$1\",\n      \"symbols\": [{\n        \"literal\": \"~\"\n      }, {\n        \"literal\": \"=\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"attributeOperator\",\n      \"symbols\": [\"attributeOperator$string$1\"]\n    }, {\n      \"name\": \"attributeOperator$string$2\",\n      \"symbols\": [{\n        \"literal\": \"|\"\n      }, {\n        \"literal\": \"=\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"attributeOperator\",\n      \"symbols\": [\"attributeOperator$string$2\"]\n    }, {\n      \"name\": \"attributeOperator$string$3\",\n      \"symbols\": [{\n        \"literal\": \"^\"\n      }, {\n        \"literal\": \"=\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"attributeOperator\",\n      \"symbols\": [\"attributeOperator$string$3\"]\n    }, {\n      \"name\": \"attributeOperator$string$4\",\n      \"symbols\": [{\n        \"literal\": \"$\"\n      }, {\n        \"literal\": \"=\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"attributeOperator\",\n      \"symbols\": [\"attributeOperator$string$4\"]\n    }, {\n      \"name\": \"attributeOperator$string$5\",\n      \"symbols\": [{\n        \"literal\": \"*\"\n      }, {\n        \"literal\": \"=\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"attributeOperator\",\n      \"symbols\": [\"attributeOperator$string$5\"]\n    }, {\n      \"name\": \"attributeValueSelector\",\n      \"symbols\": [{\n        \"literal\": \"[\"\n      }, \"attributeName\", \"attributeOperator\", \"attributeValue\", {\n        \"literal\": \"]\"\n      }],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'attributeValueSelector',\n          name: d[1],\n          value: d[3],\n          operator: d[2][0]\n        };\n      }\n    }, {\n      \"name\": \"attributeValue\",\n      \"symbols\": [\"falsyPrimitiveStrings\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"attributeValue\",\n      \"symbols\": [\"numericValue\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"attributeValue\",\n      \"symbols\": [\"sqstring\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"attributeValue\",\n      \"symbols\": [\"dqstring\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"falsyPrimitiveStrings$string$1\",\n      \"symbols\": [{\n        \"literal\": \"f\"\n      }, {\n        \"literal\": \"a\"\n      }, {\n        \"literal\": \"l\"\n      }, {\n        \"literal\": \"s\"\n      }, {\n        \"literal\": \"e\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"falsyPrimitiveStrings\",\n      \"symbols\": [\"falsyPrimitiveStrings$string$1\"],\n      \"postprocess\": parseAsBoolean\n    }, {\n      \"name\": \"falsyPrimitiveStrings$string$2\",\n      \"symbols\": [{\n        \"literal\": \"t\"\n      }, {\n        \"literal\": \"r\"\n      }, {\n        \"literal\": \"u\"\n      }, {\n        \"literal\": \"e\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"falsyPrimitiveStrings\",\n      \"symbols\": [\"falsyPrimitiveStrings$string$2\"],\n      \"postprocess\": parseAsBoolean\n    }, {\n      \"name\": \"falsyPrimitiveStrings$string$3\",\n      \"symbols\": [{\n        \"literal\": \"N\"\n      }, {\n        \"literal\": \"a\"\n      }, {\n        \"literal\": \"N\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"falsyPrimitiveStrings\",\n      \"symbols\": [\"falsyPrimitiveStrings$string$3\"],\n      \"postprocess\": parseFalsyPrimitive\n    }, {\n      \"name\": \"falsyPrimitiveStrings$string$4\",\n      \"symbols\": [{\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"u\"\n      }, {\n        \"literal\": \"l\"\n      }, {\n        \"literal\": \"l\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"falsyPrimitiveStrings\",\n      \"symbols\": [\"falsyPrimitiveStrings$string$4\"],\n      \"postprocess\": parseFalsyPrimitive\n    }, {\n      \"name\": \"falsyPrimitiveStrings$string$5\",\n      \"symbols\": [{\n        \"literal\": \"u\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"d\"\n      }, {\n        \"literal\": \"e\"\n      }, {\n        \"literal\": \"f\"\n      }, {\n        \"literal\": \"i\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"e\"\n      }, {\n        \"literal\": \"d\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"falsyPrimitiveStrings\",\n      \"symbols\": [\"falsyPrimitiveStrings$string$5\"],\n      \"postprocess\": parseFalsyPrimitive\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [\"int\", {\n        \"literal\": \".\"\n      }, \"int\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [{\n        \"literal\": \"+\"\n      }, \"int\", {\n        \"literal\": \".\"\n      }, \"int\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [{\n        \"literal\": \"-\"\n      }, \"int\", {\n        \"literal\": \".\"\n      }, \"int\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [{\n        \"literal\": \"-\"\n      }, \"int\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [\"int\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [{\n        \"literal\": \"+\"\n      }, \"int\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue$string$1\",\n      \"symbols\": [{\n        \"literal\": \"I\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"f\"\n      }, {\n        \"literal\": \"i\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"i\"\n      }, {\n        \"literal\": \"t\"\n      }, {\n        \"literal\": \"y\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [\"numericValue$string$1\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue$string$2\",\n      \"symbols\": [{\n        \"literal\": \"+\"\n      }, {\n        \"literal\": \"I\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"f\"\n      }, {\n        \"literal\": \"i\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"i\"\n      }, {\n        \"literal\": \"t\"\n      }, {\n        \"literal\": \"y\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [\"numericValue$string$2\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue$string$3\",\n      \"symbols\": [{\n        \"literal\": \"-\"\n      }, {\n        \"literal\": \"I\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"f\"\n      }, {\n        \"literal\": \"i\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"i\"\n      }, {\n        \"literal\": \"t\"\n      }, {\n        \"literal\": \"y\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [\"numericValue$string$3\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"int$ebnf$1\",\n      \"symbols\": [/[0-9]/]\n    }, {\n      \"name\": \"int$ebnf$1\",\n      \"symbols\": [\"int$ebnf$1\", /[0-9]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"int\",\n      \"symbols\": [\"int$ebnf$1\"]\n    }, {\n      \"name\": \"classParameters\",\n      \"symbols\": []\n    }, {\n      \"name\": \"classParameters\",\n      \"symbols\": [\"classParameter\"]\n    }, {\n      \"name\": \"classParameters\",\n      \"symbols\": [\"classParameters\", {\n        \"literal\": \",\"\n      }, \"_\", \"classParameter\"],\n      \"postprocess\": appendItem(0, 3)\n    }, {\n      \"name\": \"classParameter$ebnf$1\",\n      \"symbols\": [/[^()\"', ]/]\n    }, {\n      \"name\": \"classParameter$ebnf$1\",\n      \"symbols\": [\"classParameter$ebnf$1\", /[^()\"', ]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"classParameter\",\n      \"symbols\": [\"classParameter$ebnf$1\"],\n      \"postprocess\": function postprocess(d) {\n        return d[0].join('');\n      }\n    }, {\n      \"name\": \"classParameter\",\n      \"symbols\": [\"sqstring\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"classParameter\",\n      \"symbols\": [\"dqstring\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"pseudoElementSelector$string$1\",\n      \"symbols\": [{\n        \"literal\": \":\"\n      }, {\n        \"literal\": \":\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"pseudoElementSelector\",\n      \"symbols\": [\"pseudoElementSelector$string$1\", \"pseudoClassSelectorName\"],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'pseudoElementSelector',\n          name: d[1]\n        };\n      }\n    }, {\n      \"name\": \"pseudoClassSelector\",\n      \"symbols\": [{\n        \"literal\": \":\"\n      }, \"pseudoClassSelectorName\"],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'pseudoClassSelector',\n          name: d[1]\n        };\n      }\n    }, {\n      \"name\": \"pseudoClassSelector\",\n      \"symbols\": [{\n        \"literal\": \":\"\n      }, \"pseudoClassSelectorName\", {\n        \"literal\": \"(\"\n      }, \"classParameters\", {\n        \"literal\": \")\"\n      }],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'pseudoClassSelector',\n          name: d[1],\n          parameters: d[3]\n        };\n      }\n    }, {\n      \"name\": \"pseudoClassSelectorName$ebnf$1\",\n      \"symbols\": [/[a-zA-Z0-9-_]/]\n    }, {\n      \"name\": \"pseudoClassSelectorName$ebnf$1\",\n      \"symbols\": [\"pseudoClassSelectorName$ebnf$1\", /[a-zA-Z0-9-_]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"pseudoClassSelectorName\",\n      \"symbols\": [/[a-zA-Z]/, \"pseudoClassSelectorName$ebnf$1\"],\n      \"postprocess\": function postprocess(d) {\n        return d[0] + d[1].join('');\n      }\n    }, {\n      \"name\": \"dqstring$ebnf$1\",\n      \"symbols\": []\n    }, {\n      \"name\": \"dqstring$ebnf$1\",\n      \"symbols\": [\"dqstring$ebnf$1\", \"dstrchar\"],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"dqstring\",\n      \"symbols\": [{\n        \"literal\": \"\\\"\"\n      }, \"dqstring$ebnf$1\", {\n        \"literal\": \"\\\"\"\n      }],\n      \"postprocess\": function postprocess(d) {\n        return d[1].join('');\n      }\n    }, {\n      \"name\": \"dstrchar\",\n      \"symbols\": [/[^\"]/],\n      \"postprocess\": id\n    }, {\n      \"name\": \"dstrchar$string$1\",\n      \"symbols\": [{\n        \"literal\": \"\\\\\"\n      }, {\n        \"literal\": \"\\\"\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"dstrchar\",\n      \"symbols\": [\"dstrchar$string$1\"],\n      \"postprocess\": function postprocess(d) {\n        return '\"';\n      }\n    }, {\n      \"name\": \"sqstring$ebnf$1\",\n      \"symbols\": []\n    }, {\n      \"name\": \"sqstring$ebnf$1\",\n      \"symbols\": [\"sqstring$ebnf$1\", \"sstrchar\"],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"sqstring\",\n      \"symbols\": [{\n        \"literal\": \"'\"\n      }, \"sqstring$ebnf$1\", {\n        \"literal\": \"'\"\n      }],\n      \"postprocess\": function postprocess(d) {\n        return d[1].join('');\n      }\n    }, {\n      \"name\": \"sstrchar\",\n      \"symbols\": [/[^']/],\n      \"postprocess\": id\n    }, {\n      \"name\": \"sstrchar$string$1\",\n      \"symbols\": [{\n        \"literal\": \"\\\\\"\n      }, {\n        \"literal\": \"'\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"sstrchar\",\n      \"symbols\": [\"sstrchar$string$1\"],\n      \"postprocess\": function postprocess(d) {\n        return '\\'';\n      }\n    }, {\n      \"name\": \"_$ebnf$1\",\n      \"symbols\": []\n    }, {\n      \"name\": \"_$ebnf$1\",\n      \"symbols\": [\"_$ebnf$1\", /[ ]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"_\",\n      \"symbols\": [\"_$ebnf$1\"],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }],\n    ParserStart: \"combinator\"\n  };\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = grammar;\n  } else {\n    window.grammar = grammar;\n  }\n})();","map":{"version":3,"mappings":"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","names":["id","x","flattenDeep","require","appendItem","a","b","d","concat","appendItemChar","flatten","filter","r","combinatorMap","concatUsingCombinator","Array","isArray","type","parseAsNumber","i","reject","joined","join","parsed","parseFloat","isNaN","parseAsBoolean","parseFalsyPrimitive","NaN","undefined","grammar","Lexer","ParserRules","body","arrpush","selectors","length","name","joiner","value","operator","parameters","ParserStart","module","exports","window"],"sources":["/Users/sebas/Desktop/robofriends-testing/node_modules/rst-selector-parser/src/grammar.js"],"sourcesContent":["// Generated automatically by nearley\n// http://github.com/Hardmath123/nearley\n(function () {\nfunction id(x) {return x[0]; }\n\n  const flattenDeep = require('lodash.flattendeep');\n  const appendItem = (a, b) => d => d[a].concat([d[b]]);\n  const appendItemChar = (a, b) => d => d[a].concat(d[b]);\n\n  const flatten = d => {\n    d = d.filter((r) => { return r !== null; });\n    return flattenDeep(d);\n  };\n\n  const combinatorMap = {\n    ' ': 'descendantCombinator',\n    '+': 'adjacentSiblingCombinator',\n    '>': 'childCombinator',\n    '~': 'generalSiblingCombinator'\n  };\n\n  const concatUsingCombinator = d => {\n    return (\n        Array.isArray(d[0]) ? d[0] : [d[0]]\n      )\n      .concat({\n        type: combinatorMap[d[2]]\n      })\n      .concat(d[4]);\n  };\n\n  const parseAsNumber = (d, i, reject) => {\n    const joined = flattenDeep(d).join('');\n    const parsed = parseFloat(joined);\n    if (isNaN(parsed)) {\n      return reject\n    }\n    return parsed\n  }\n\n  const parseAsBoolean = (d, i, reject) => {\n    if (d[0] === 'true') return true;\n    if (d[0] === 'false') return false;\n    return reject;\n  }\n\n  const parseFalsyPrimitive = (d, i, reject) => {\n    if (d[0] === 'NaN') return NaN;\n    if (d[0] === 'undefined') return undefined;\n    if (d[0] === 'null') return null;\n    return reject\n  }\nvar grammar = {\n    Lexer: undefined,\n    ParserRules: [\n    {\"name\": \"combinator\", \"symbols\": [\"selector\"]},\n    {\"name\": \"combinator\", \"symbols\": [\"combinator\", \"_\", /[>+~ ]/, \"_\", \"selector\"], \"postprocess\": concatUsingCombinator},\n    {\"name\": \"selector\", \"symbols\": [\"selectorBody\"], \"postprocess\": d => ({type: 'selector', body: d[0]})},\n    {\"name\": \"selectorBody$ebnf$1\", \"symbols\": [\"typeSelector\"], \"postprocess\": id},\n    {\"name\": \"selectorBody$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"selectorBody$ebnf$2\", \"symbols\": []},\n    {\"name\": \"selectorBody$ebnf$2\", \"symbols\": [\"selectorBody$ebnf$2\", \"simpleSelector\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"selectorBody\", \"symbols\": [\"selectorBody$ebnf$1\", \"selectorBody$ebnf$2\"], \"postprocess\": (d, i, reject) => { const selectors = flatten(d); if (!selectors.length) return reject; return selectors; }},\n    {\"name\": \"selectorBody$ebnf$3\", \"symbols\": []},\n    {\"name\": \"selectorBody$ebnf$3\", \"symbols\": [\"selectorBody$ebnf$3\", \"simpleSelector\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"selectorBody\", \"symbols\": [\"universalSelector\", \"selectorBody$ebnf$3\"], \"postprocess\": flatten},\n    {\"name\": \"simpleSelector\", \"symbols\": [\"idSelector\"]},\n    {\"name\": \"simpleSelector\", \"symbols\": [\"classSelector\"]},\n    {\"name\": \"simpleSelector\", \"symbols\": [\"attributeValueSelector\"]},\n    {\"name\": \"simpleSelector\", \"symbols\": [\"attributePresenceSelector\"]},\n    {\"name\": \"simpleSelector\", \"symbols\": [\"pseudoClassSelector\"]},\n    {\"name\": \"simpleSelector\", \"symbols\": [\"pseudoElementSelector\"]},\n    {\"name\": \"typeSelector\", \"symbols\": [\"attributeName\"], \"postprocess\": d => ({type: 'typeSelector', name: d[0]})},\n    {\"name\": \"className$ebnf$1\", \"symbols\": [{\"literal\":\"-\"}], \"postprocess\": id},\n    {\"name\": \"className$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"className$ebnf$2\", \"symbols\": []},\n    {\"name\": \"className$ebnf$2\", \"symbols\": [\"className$ebnf$2\", /[_a-zA-Z0-9-]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"className\", \"symbols\": [\"className$ebnf$1\", /[_a-zA-Z]/, \"className$ebnf$2\"], \"postprocess\": d => (d[0] || '') + d[1] + d[2].join('')},\n    {\"name\": \"attributeName$ebnf$1\", \"symbols\": []},\n    {\"name\": \"attributeName$ebnf$1\", \"symbols\": [\"attributeName$ebnf$1\", /[_a-zA-Z()0-9-]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"attributeName\", \"symbols\": [/[_a-z()A-Z]/, \"attributeName$ebnf$1\"], \"postprocess\": d => d[0] + d[1].join('')},\n    {\"name\": \"classSelector\", \"symbols\": [{\"literal\":\".\"}, \"className\"], \"postprocess\": d => ({type: 'classSelector', name: d[1]})},\n    {\"name\": \"idSelector\", \"symbols\": [{\"literal\":\"#\"}, \"attributeName\"], \"postprocess\": d => ({type: 'idSelector', name: d[1]})},\n    {\"name\": \"universalSelector\", \"symbols\": [{\"literal\":\"*\"}], \"postprocess\": d => ({type: 'universalSelector'})},\n    {\"name\": \"attributePresenceSelector\", \"symbols\": [{\"literal\":\"[\"}, \"attributeName\", {\"literal\":\"]\"}], \"postprocess\": d => ({type: 'attributePresenceSelector', name: d[1]})},\n    {\"name\": \"attributeOperator\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"attributeOperator$string$1\", \"symbols\": [{\"literal\":\"~\"}, {\"literal\":\"=\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"attributeOperator\", \"symbols\": [\"attributeOperator$string$1\"]},\n    {\"name\": \"attributeOperator$string$2\", \"symbols\": [{\"literal\":\"|\"}, {\"literal\":\"=\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"attributeOperator\", \"symbols\": [\"attributeOperator$string$2\"]},\n    {\"name\": \"attributeOperator$string$3\", \"symbols\": [{\"literal\":\"^\"}, {\"literal\":\"=\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"attributeOperator\", \"symbols\": [\"attributeOperator$string$3\"]},\n    {\"name\": \"attributeOperator$string$4\", \"symbols\": [{\"literal\":\"$\"}, {\"literal\":\"=\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"attributeOperator\", \"symbols\": [\"attributeOperator$string$4\"]},\n    {\"name\": \"attributeOperator$string$5\", \"symbols\": [{\"literal\":\"*\"}, {\"literal\":\"=\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"attributeOperator\", \"symbols\": [\"attributeOperator$string$5\"]},\n    {\"name\": \"attributeValueSelector\", \"symbols\": [{\"literal\":\"[\"}, \"attributeName\", \"attributeOperator\", \"attributeValue\", {\"literal\":\"]\"}], \"postprocess\": \n        d => ({\n          type: 'attributeValueSelector',\n          name: d[1],\n          value: d[3],\n          operator: d[2][0]\n        })\n        },\n    {\"name\": \"attributeValue\", \"symbols\": [\"falsyPrimitiveStrings\"], \"postprocess\": id},\n    {\"name\": \"attributeValue\", \"symbols\": [\"numericValue\"], \"postprocess\": id},\n    {\"name\": \"attributeValue\", \"symbols\": [\"sqstring\"], \"postprocess\": id},\n    {\"name\": \"attributeValue\", \"symbols\": [\"dqstring\"], \"postprocess\": id},\n    {\"name\": \"falsyPrimitiveStrings$string$1\", \"symbols\": [{\"literal\":\"f\"}, {\"literal\":\"a\"}, {\"literal\":\"l\"}, {\"literal\":\"s\"}, {\"literal\":\"e\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"falsyPrimitiveStrings\", \"symbols\": [\"falsyPrimitiveStrings$string$1\"], \"postprocess\": parseAsBoolean},\n    {\"name\": \"falsyPrimitiveStrings$string$2\", \"symbols\": [{\"literal\":\"t\"}, {\"literal\":\"r\"}, {\"literal\":\"u\"}, {\"literal\":\"e\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"falsyPrimitiveStrings\", \"symbols\": [\"falsyPrimitiveStrings$string$2\"], \"postprocess\": parseAsBoolean},\n    {\"name\": \"falsyPrimitiveStrings$string$3\", \"symbols\": [{\"literal\":\"N\"}, {\"literal\":\"a\"}, {\"literal\":\"N\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"falsyPrimitiveStrings\", \"symbols\": [\"falsyPrimitiveStrings$string$3\"], \"postprocess\": parseFalsyPrimitive},\n    {\"name\": \"falsyPrimitiveStrings$string$4\", \"symbols\": [{\"literal\":\"n\"}, {\"literal\":\"u\"}, {\"literal\":\"l\"}, {\"literal\":\"l\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"falsyPrimitiveStrings\", \"symbols\": [\"falsyPrimitiveStrings$string$4\"], \"postprocess\": parseFalsyPrimitive},\n    {\"name\": \"falsyPrimitiveStrings$string$5\", \"symbols\": [{\"literal\":\"u\"}, {\"literal\":\"n\"}, {\"literal\":\"d\"}, {\"literal\":\"e\"}, {\"literal\":\"f\"}, {\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"e\"}, {\"literal\":\"d\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"falsyPrimitiveStrings\", \"symbols\": [\"falsyPrimitiveStrings$string$5\"], \"postprocess\": parseFalsyPrimitive},\n    {\"name\": \"numericValue\", \"symbols\": [\"int\", {\"literal\":\".\"}, \"int\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue\", \"symbols\": [{\"literal\":\"+\"}, \"int\", {\"literal\":\".\"}, \"int\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue\", \"symbols\": [{\"literal\":\"-\"}, \"int\", {\"literal\":\".\"}, \"int\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue\", \"symbols\": [{\"literal\":\"-\"}, \"int\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue\", \"symbols\": [\"int\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue\", \"symbols\": [{\"literal\":\"+\"}, \"int\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue$string$1\", \"symbols\": [{\"literal\":\"I\"}, {\"literal\":\"n\"}, {\"literal\":\"f\"}, {\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"i\"}, {\"literal\":\"t\"}, {\"literal\":\"y\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"numericValue\", \"symbols\": [\"numericValue$string$1\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue$string$2\", \"symbols\": [{\"literal\":\"+\"}, {\"literal\":\"I\"}, {\"literal\":\"n\"}, {\"literal\":\"f\"}, {\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"i\"}, {\"literal\":\"t\"}, {\"literal\":\"y\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"numericValue\", \"symbols\": [\"numericValue$string$2\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue$string$3\", \"symbols\": [{\"literal\":\"-\"}, {\"literal\":\"I\"}, {\"literal\":\"n\"}, {\"literal\":\"f\"}, {\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"i\"}, {\"literal\":\"t\"}, {\"literal\":\"y\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"numericValue\", \"symbols\": [\"numericValue$string$3\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"int$ebnf$1\", \"symbols\": [/[0-9]/]},\n    {\"name\": \"int$ebnf$1\", \"symbols\": [\"int$ebnf$1\", /[0-9]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"int\", \"symbols\": [\"int$ebnf$1\"]},\n    {\"name\": \"classParameters\", \"symbols\": []},\n    {\"name\": \"classParameters\", \"symbols\": [\"classParameter\"]},\n    {\"name\": \"classParameters\", \"symbols\": [\"classParameters\", {\"literal\":\",\"}, \"_\", \"classParameter\"], \"postprocess\": appendItem(0, 3)},\n    {\"name\": \"classParameter$ebnf$1\", \"symbols\": [/[^()\"', ]/]},\n    {\"name\": \"classParameter$ebnf$1\", \"symbols\": [\"classParameter$ebnf$1\", /[^()\"', ]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"classParameter\", \"symbols\": [\"classParameter$ebnf$1\"], \"postprocess\": d => d[0].join('')},\n    {\"name\": \"classParameter\", \"symbols\": [\"sqstring\"], \"postprocess\": id},\n    {\"name\": \"classParameter\", \"symbols\": [\"dqstring\"], \"postprocess\": id},\n    {\"name\": \"pseudoElementSelector$string$1\", \"symbols\": [{\"literal\":\":\"}, {\"literal\":\":\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"pseudoElementSelector\", \"symbols\": [\"pseudoElementSelector$string$1\", \"pseudoClassSelectorName\"], \"postprocess\": d => ({type: 'pseudoElementSelector', name: d[1]})},\n    {\"name\": \"pseudoClassSelector\", \"symbols\": [{\"literal\":\":\"}, \"pseudoClassSelectorName\"], \"postprocess\": d => ({type: 'pseudoClassSelector', name: d[1]})},\n    {\"name\": \"pseudoClassSelector\", \"symbols\": [{\"literal\":\":\"}, \"pseudoClassSelectorName\", {\"literal\":\"(\"}, \"classParameters\", {\"literal\":\")\"}], \"postprocess\": d => ({type: 'pseudoClassSelector', name: d[1], parameters: d[3]})},\n    {\"name\": \"pseudoClassSelectorName$ebnf$1\", \"symbols\": [/[a-zA-Z0-9-_]/]},\n    {\"name\": \"pseudoClassSelectorName$ebnf$1\", \"symbols\": [\"pseudoClassSelectorName$ebnf$1\", /[a-zA-Z0-9-_]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"pseudoClassSelectorName\", \"symbols\": [/[a-zA-Z]/, \"pseudoClassSelectorName$ebnf$1\"], \"postprocess\": d => d[0] + d[1].join('')},\n    {\"name\": \"dqstring$ebnf$1\", \"symbols\": []},\n    {\"name\": \"dqstring$ebnf$1\", \"symbols\": [\"dqstring$ebnf$1\", \"dstrchar\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"dqstring\", \"symbols\": [{\"literal\":\"\\\"\"}, \"dqstring$ebnf$1\", {\"literal\":\"\\\"\"}], \"postprocess\": d => d[1].join('')},\n    {\"name\": \"dstrchar\", \"symbols\": [/[^\"]/], \"postprocess\": id},\n    {\"name\": \"dstrchar$string$1\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"\\\"\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"dstrchar\", \"symbols\": [\"dstrchar$string$1\"], \"postprocess\": d => '\"'},\n    {\"name\": \"sqstring$ebnf$1\", \"symbols\": []},\n    {\"name\": \"sqstring$ebnf$1\", \"symbols\": [\"sqstring$ebnf$1\", \"sstrchar\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"sqstring\", \"symbols\": [{\"literal\":\"'\"}, \"sqstring$ebnf$1\", {\"literal\":\"'\"}], \"postprocess\": d => d[1].join('')},\n    {\"name\": \"sstrchar\", \"symbols\": [/[^']/], \"postprocess\": id},\n    {\"name\": \"sstrchar$string$1\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"'\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"sstrchar\", \"symbols\": [\"sstrchar$string$1\"], \"postprocess\": d => '\\''},\n    {\"name\": \"_$ebnf$1\", \"symbols\": []},\n    {\"name\": \"_$ebnf$1\", \"symbols\": [\"_$ebnf$1\", /[ ]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"], \"postprocess\": d => null}\n]\n  , ParserStart: \"combinator\"\n}\nif (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {\n   module.exports = grammar;\n} else {\n   window.grammar = grammar;\n}\n})();\n"]},"metadata":{},"sourceType":"script"}