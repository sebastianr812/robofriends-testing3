{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.merge = exports.contains = exports.root = exports.parseHTML = exports.text = exports.xml = exports.html = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar options_1 = tslib_1.__importStar(require(\"./options\"));\n\nvar cheerio_select_1 = require(\"cheerio-select\");\n\nvar htmlparser2_1 = require(\"htmlparser2\");\n\nvar parse5_adapter_1 = require(\"./parsers/parse5-adapter\");\n\nvar htmlparser2_adapter_1 = require(\"./parsers/htmlparser2-adapter\");\n/**\n * Helper function to render a DOM.\n *\n * @param that - Cheerio instance to render.\n * @param dom - The DOM to render. Defaults to `that`'s root.\n * @param options - Options for rendering.\n * @returns The rendered document.\n */\n\n\nfunction render(that, dom, options) {\n  var _a;\n\n  var toRender = dom ? typeof dom === 'string' ? cheerio_select_1.select(dom, (_a = that === null || that === void 0 ? void 0 : that._root) !== null && _a !== void 0 ? _a : [], options) : dom : that === null || that === void 0 ? void 0 : that._root.children;\n  if (!toRender) return '';\n  return options.xmlMode || options._useHtmlParser2 ? htmlparser2_adapter_1.render(toRender, options) : parse5_adapter_1.render(toRender);\n}\n/**\n * Checks if a passed object is an options object.\n *\n * @param dom - Object to check if it is an options object.\n * @returns Whether the object is an options object.\n */\n\n\nfunction isOptions(dom) {\n  return typeof dom === 'object' && dom != null && !('length' in dom) && !('type' in dom);\n}\n\nfunction html(dom, options) {\n  /*\n   * Be flexible about parameters, sometimes we call html(),\n   * with options as only parameter\n   * check dom argument for dom element specific properties\n   * assume there is no 'length' or 'type' properties in the options object\n   */\n  if (!options && isOptions(dom)) {\n    options = dom;\n    dom = undefined;\n  }\n  /*\n   * Sometimes `$.html()` is used without preloading html,\n   * so fallback non-existing options to the default ones.\n   */\n\n\n  var opts = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, options_1.default), this ? this._options : {}), options_1.flatten(options !== null && options !== void 0 ? options : {}));\n\n  return render(this || undefined, dom, opts);\n}\n\nexports.html = html;\n/**\n * Render the document as XML.\n *\n * @param dom - Element to render.\n * @returns THe rendered document.\n */\n\nfunction xml(dom) {\n  var options = tslib_1.__assign(tslib_1.__assign({}, this._options), {\n    xmlMode: true\n  });\n\n  return render(this, dom, options);\n}\n\nexports.xml = xml;\n/**\n * Render the document as text.\n *\n * @param elements - Elements to render.\n * @returns The rendered document.\n */\n\nfunction text(elements) {\n  var elems = elements ? elements : this ? this.root() : [];\n  var ret = '';\n\n  for (var i = 0; i < elems.length; i++) {\n    var elem = elems[i];\n    if (htmlparser2_1.DomUtils.isText(elem)) ret += elem.data;else if (htmlparser2_1.DomUtils.hasChildren(elem) && elem.type !== htmlparser2_1.ElementType.Comment && elem.type !== htmlparser2_1.ElementType.Script && elem.type !== htmlparser2_1.ElementType.Style) {\n      ret += text(elem.children);\n    }\n  }\n\n  return ret;\n}\n\nexports.text = text;\n\nfunction parseHTML(data, context, keepScripts) {\n  if (keepScripts === void 0) {\n    keepScripts = typeof context === 'boolean' ? context : false;\n  }\n\n  if (!data || typeof data !== 'string') {\n    return null;\n  }\n\n  if (typeof context === 'boolean') {\n    keepScripts = context;\n  }\n\n  var parsed = this.load(data, options_1.default, false);\n\n  if (!keepScripts) {\n    parsed('script').remove();\n  }\n  /*\n   * The `children` array is used by Cheerio internally to group elements that\n   * share the same parents. When nodes created through `parseHTML` are\n   * inserted into previously-existing DOM structures, they will be removed\n   * from the `children` array. The results of `parseHTML` should remain\n   * constant across these operations, so a shallow copy should be returned.\n   */\n\n\n  return parsed.root()[0].children.slice();\n}\n\nexports.parseHTML = parseHTML;\n/**\n * Sometimes you need to work with the top-level root element. To query it, you\n * can use `$.root()`.\n *\n * @example\n *\n * ```js\n * $.root().append('<ul id=\"vegetables\"></ul>').html();\n * //=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\n * ```\n *\n * @returns Cheerio instance wrapping the root node.\n * @alias Cheerio.root\n */\n\nfunction root() {\n  return this(this._root);\n}\n\nexports.root = root;\n/**\n * Checks to see if the `contained` DOM element is a descendant of the\n * `container` DOM element.\n *\n * @param container - Potential parent node.\n * @param contained - Potential child node.\n * @returns Indicates if the nodes contain one another.\n * @alias Cheerio.contains\n * @see {@link https://api.jquery.com/jQuery.contains/}\n */\n\nfunction contains(container, contained) {\n  // According to the jQuery API, an element does not \"contain\" itself\n  if (contained === container) {\n    return false;\n  }\n  /*\n   * Step up the descendants, stopping when the root element is reached\n   * (signaled by `.parent` returning a reference to the same object)\n   */\n\n\n  var next = contained;\n\n  while (next && next !== next.parent) {\n    next = next.parent;\n\n    if (next === container) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.contains = contains;\n/**\n * $.merge().\n *\n * @param arr1 - First array.\n * @param arr2 - Second array.\n * @returns `arr1`, with elements of `arr2` inserted.\n * @alias Cheerio.merge\n * @see {@link https://api.jquery.com/jQuery.merge/}\n */\n\nfunction merge(arr1, arr2) {\n  if (!isArrayLike(arr1) || !isArrayLike(arr2)) {\n    return;\n  }\n\n  var newLength = arr1.length;\n  var len = +arr2.length;\n\n  for (var i = 0; i < len; i++) {\n    arr1[newLength++] = arr2[i];\n  }\n\n  arr1.length = newLength;\n  return arr1;\n}\n\nexports.merge = merge;\n/**\n * @param item - Item to check.\n * @returns Indicates if the item is array-like.\n */\n\nfunction isArrayLike(item) {\n  if (Array.isArray(item)) {\n    return true;\n  }\n\n  if (typeof item !== 'object' || !Object.prototype.hasOwnProperty.call(item, 'length') || typeof item.length !== 'number' || item.length < 0) {\n    return false;\n  }\n\n  for (var i = 0; i < item.length; i++) {\n    if (!(i in item)) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","merge","contains","root","parseHTML","text","xml","html","tslib_1","require","options_1","__importStar","cheerio_select_1","htmlparser2_1","parse5_adapter_1","htmlparser2_adapter_1","render","that","dom","options","_a","toRender","select","_root","children","xmlMode","_useHtmlParser2","isOptions","undefined","opts","__assign","default","_options","flatten","elements","elems","ret","i","length","elem","DomUtils","isText","data","hasChildren","type","ElementType","Comment","Script","Style","context","keepScripts","parsed","load","remove","slice","container","contained","next","parent","arr1","arr2","isArrayLike","newLength","len","item","Array","isArray","prototype","hasOwnProperty","call"],"sources":["/Users/sebas/Desktop/robofriends-testing/node_modules/cheerio/lib/static.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.merge = exports.contains = exports.root = exports.parseHTML = exports.text = exports.xml = exports.html = void 0;\nvar tslib_1 = require(\"tslib\");\nvar options_1 = tslib_1.__importStar(require(\"./options\"));\nvar cheerio_select_1 = require(\"cheerio-select\");\nvar htmlparser2_1 = require(\"htmlparser2\");\nvar parse5_adapter_1 = require(\"./parsers/parse5-adapter\");\nvar htmlparser2_adapter_1 = require(\"./parsers/htmlparser2-adapter\");\n/**\n * Helper function to render a DOM.\n *\n * @param that - Cheerio instance to render.\n * @param dom - The DOM to render. Defaults to `that`'s root.\n * @param options - Options for rendering.\n * @returns The rendered document.\n */\nfunction render(that, dom, options) {\n    var _a;\n    var toRender = dom\n        ? typeof dom === 'string'\n            ? cheerio_select_1.select(dom, (_a = that === null || that === void 0 ? void 0 : that._root) !== null && _a !== void 0 ? _a : [], options)\n            : dom\n        : that === null || that === void 0 ? void 0 : that._root.children;\n    if (!toRender)\n        return '';\n    return options.xmlMode || options._useHtmlParser2\n        ? htmlparser2_adapter_1.render(toRender, options)\n        : parse5_adapter_1.render(toRender);\n}\n/**\n * Checks if a passed object is an options object.\n *\n * @param dom - Object to check if it is an options object.\n * @returns Whether the object is an options object.\n */\nfunction isOptions(dom) {\n    return (typeof dom === 'object' &&\n        dom != null &&\n        !('length' in dom) &&\n        !('type' in dom));\n}\nfunction html(dom, options) {\n    /*\n     * Be flexible about parameters, sometimes we call html(),\n     * with options as only parameter\n     * check dom argument for dom element specific properties\n     * assume there is no 'length' or 'type' properties in the options object\n     */\n    if (!options && isOptions(dom)) {\n        options = dom;\n        dom = undefined;\n    }\n    /*\n     * Sometimes `$.html()` is used without preloading html,\n     * so fallback non-existing options to the default ones.\n     */\n    var opts = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, options_1.default), (this ? this._options : {})), options_1.flatten(options !== null && options !== void 0 ? options : {}));\n    return render(this || undefined, dom, opts);\n}\nexports.html = html;\n/**\n * Render the document as XML.\n *\n * @param dom - Element to render.\n * @returns THe rendered document.\n */\nfunction xml(dom) {\n    var options = tslib_1.__assign(tslib_1.__assign({}, this._options), { xmlMode: true });\n    return render(this, dom, options);\n}\nexports.xml = xml;\n/**\n * Render the document as text.\n *\n * @param elements - Elements to render.\n * @returns The rendered document.\n */\nfunction text(elements) {\n    var elems = elements ? elements : this ? this.root() : [];\n    var ret = '';\n    for (var i = 0; i < elems.length; i++) {\n        var elem = elems[i];\n        if (htmlparser2_1.DomUtils.isText(elem))\n            ret += elem.data;\n        else if (htmlparser2_1.DomUtils.hasChildren(elem) &&\n            elem.type !== htmlparser2_1.ElementType.Comment &&\n            elem.type !== htmlparser2_1.ElementType.Script &&\n            elem.type !== htmlparser2_1.ElementType.Style) {\n            ret += text(elem.children);\n        }\n    }\n    return ret;\n}\nexports.text = text;\nfunction parseHTML(data, context, keepScripts) {\n    if (keepScripts === void 0) { keepScripts = typeof context === 'boolean' ? context : false; }\n    if (!data || typeof data !== 'string') {\n        return null;\n    }\n    if (typeof context === 'boolean') {\n        keepScripts = context;\n    }\n    var parsed = this.load(data, options_1.default, false);\n    if (!keepScripts) {\n        parsed('script').remove();\n    }\n    /*\n     * The `children` array is used by Cheerio internally to group elements that\n     * share the same parents. When nodes created through `parseHTML` are\n     * inserted into previously-existing DOM structures, they will be removed\n     * from the `children` array. The results of `parseHTML` should remain\n     * constant across these operations, so a shallow copy should be returned.\n     */\n    return parsed.root()[0].children.slice();\n}\nexports.parseHTML = parseHTML;\n/**\n * Sometimes you need to work with the top-level root element. To query it, you\n * can use `$.root()`.\n *\n * @example\n *\n * ```js\n * $.root().append('<ul id=\"vegetables\"></ul>').html();\n * //=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\n * ```\n *\n * @returns Cheerio instance wrapping the root node.\n * @alias Cheerio.root\n */\nfunction root() {\n    return this(this._root);\n}\nexports.root = root;\n/**\n * Checks to see if the `contained` DOM element is a descendant of the\n * `container` DOM element.\n *\n * @param container - Potential parent node.\n * @param contained - Potential child node.\n * @returns Indicates if the nodes contain one another.\n * @alias Cheerio.contains\n * @see {@link https://api.jquery.com/jQuery.contains/}\n */\nfunction contains(container, contained) {\n    // According to the jQuery API, an element does not \"contain\" itself\n    if (contained === container) {\n        return false;\n    }\n    /*\n     * Step up the descendants, stopping when the root element is reached\n     * (signaled by `.parent` returning a reference to the same object)\n     */\n    var next = contained;\n    while (next && next !== next.parent) {\n        next = next.parent;\n        if (next === container) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.contains = contains;\n/**\n * $.merge().\n *\n * @param arr1 - First array.\n * @param arr2 - Second array.\n * @returns `arr1`, with elements of `arr2` inserted.\n * @alias Cheerio.merge\n * @see {@link https://api.jquery.com/jQuery.merge/}\n */\nfunction merge(arr1, arr2) {\n    if (!isArrayLike(arr1) || !isArrayLike(arr2)) {\n        return;\n    }\n    var newLength = arr1.length;\n    var len = +arr2.length;\n    for (var i = 0; i < len; i++) {\n        arr1[newLength++] = arr2[i];\n    }\n    arr1.length = newLength;\n    return arr1;\n}\nexports.merge = merge;\n/**\n * @param item - Item to check.\n * @returns Indicates if the item is array-like.\n */\nfunction isArrayLike(item) {\n    if (Array.isArray(item)) {\n        return true;\n    }\n    if (typeof item !== 'object' ||\n        !Object.prototype.hasOwnProperty.call(item, 'length') ||\n        typeof item.length !== 'number' ||\n        item.length < 0) {\n        return false;\n    }\n    for (var i = 0; i < item.length; i++) {\n        if (!(i in item)) {\n            return false;\n        }\n    }\n    return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}