{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _object = require('object.assign');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _arrayPrototype = require('array.prototype.flat');\n\nvar _arrayPrototype2 = _interopRequireDefault(_arrayPrototype);\n\nvar _has = require('has');\n\nvar _has2 = _interopRequireDefault(_has);\n\nvar _Utils = require('./Utils');\n\nvar _getAdapter = require('./getAdapter');\n\nvar _getAdapter2 = _interopRequireDefault(_getAdapter);\n\nvar _Debug = require('./Debug');\n\nvar _RSTTraversal = require('./RSTTraversal');\n\nvar _selectors = require('./selectors');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar NODE = (0, _Utils.sym)('__node__');\nvar NODES = (0, _Utils.sym)('__nodes__');\nvar RENDERER = (0, _Utils.sym)('__renderer__');\nvar UNRENDERED = (0, _Utils.sym)('__unrendered__');\nvar ROOT = (0, _Utils.sym)('__root__');\nvar OPTIONS = (0, _Utils.sym)('__options__');\nvar ROOT_NODES = (0, _Utils.sym)('__rootNodes__');\nvar WRAPPING_COMPONENT = (0, _Utils.sym)('__wrappingComponent__');\nvar LINKED_ROOTS = (0, _Utils.sym)('__linkedRoots__');\nvar UPDATED_BY = (0, _Utils.sym)('__updatedBy__');\n/**\n * Finds all nodes in the current wrapper nodes' render trees that match the provided predicate\n * function.\n *\n * @param {ReactWrapper} wrapper\n * @param {Function} predicate\n * @param {Function} filter\n * @returns {ReactWrapper}\n */\n\nfunction findWhereUnwrapped(wrapper, predicate) {\n  var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _RSTTraversal.treeFilter;\n  return wrapper.flatMap(function (n) {\n    return filter(n.getNodeInternal(), predicate);\n  });\n}\n/**\n * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n * the provided predicate function.\n *\n * @param {ReactWrapper} wrapper\n * @param {Function} predicate\n * @returns {ReactWrapper}\n */\n\n\nfunction filterWhereUnwrapped(wrapper, predicate) {\n  return wrapper.wrap(wrapper.getNodesInternal().filter(predicate).filter(Boolean));\n}\n\nfunction getRootNodeInternal(wrapper) {\n  if (wrapper[ROOT].length !== 1) {\n    throw new Error('getRootNodeInternal(wrapper) can only be called when wrapper wraps one node');\n  }\n\n  if (wrapper[ROOT] !== wrapper) {\n    return wrapper[ROOT_NODES][0];\n  }\n\n  return wrapper[ROOT][NODE];\n}\n\nfunction nodeParents(wrapper, node) {\n  return (0, _RSTTraversal.parentsOfNode)(node, getRootNodeInternal(wrapper));\n}\n\nfunction privateSetNodes(wrapper, nodes) {\n  if (!nodes) {\n    (0, _Utils.privateSet)(wrapper, NODE, null);\n    (0, _Utils.privateSet)(wrapper, NODES, []);\n  } else if (!Array.isArray(nodes)) {\n    (0, _Utils.privateSet)(wrapper, NODE, nodes);\n    (0, _Utils.privateSet)(wrapper, NODES, [nodes]);\n  } else {\n    (0, _Utils.privateSet)(wrapper, NODE, nodes[0]);\n    (0, _Utils.privateSet)(wrapper, NODES, nodes);\n  }\n\n  (0, _Utils.privateSet)(wrapper, 'length', wrapper[NODES].length);\n}\n/**\n * @class ReactWrapper\n */\n\n\nvar ReactWrapper = function () {\n  function ReactWrapper(nodes, root) {\n    var passedOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, ReactWrapper);\n\n    if (!global.window && !global.document) {\n      throw new Error('It looks like you called `mount()` without a global document being loaded.');\n    }\n\n    var options = (0, _Utils.makeOptions)(passedOptions);\n\n    if (!root) {\n      var adapter = (0, _getAdapter2['default'])(options);\n\n      if (!adapter.isValidElement(nodes)) {\n        throw new TypeError('ReactWrapper can only wrap valid elements');\n      }\n\n      var renderer = adapter.createRenderer((0, _object2['default'])({\n        mode: 'mount'\n      }, options));\n      (0, _Utils.privateSet)(this, RENDERER, renderer);\n      renderer.render(nodes, options.context);\n      (0, _Utils.privateSet)(this, ROOT, this);\n      privateSetNodes(this, this[RENDERER].getNode());\n      (0, _Utils.privateSet)(this, OPTIONS, options);\n      (0, _Utils.privateSet)(this, LINKED_ROOTS, []);\n\n      if ((0, _Utils.isCustomComponent)(options.wrappingComponent, adapter)) {\n        if (typeof this[RENDERER].getWrappingComponentRenderer !== 'function') {\n          throw new TypeError('your adapter does not support `wrappingComponent`. Try upgrading it!');\n        } // eslint-disable-next-line no-use-before-define\n\n\n        (0, _Utils.privateSet)(this, WRAPPING_COMPONENT, new WrappingComponentWrapper(this, this[RENDERER].getWrappingComponentRenderer()));\n        this[LINKED_ROOTS].push(this[WRAPPING_COMPONENT]);\n      }\n    } else {\n      (0, _Utils.privateSet)(this, RENDERER, root[RENDERER]);\n      (0, _Utils.privateSet)(this, ROOT, root);\n      privateSetNodes(this, nodes);\n      (0, _Utils.privateSet)(this, ROOT_NODES, root[NODES]);\n      (0, _Utils.privateSet)(this, OPTIONS, root[OPTIONS]);\n      (0, _Utils.privateSet)(this, LINKED_ROOTS, []);\n    }\n\n    (0, _Utils.privateSet)(this, UNRENDERED, nodes);\n    (0, _Utils.privateSet)(this, UPDATED_BY, null);\n  }\n  /**\n   * Returns the root wrapper\n   *\n   * @return {ReactWrapper}\n   */\n\n\n  _createClass(ReactWrapper, [{\n    key: 'root',\n    value: function () {\n      function root() {\n        return this[ROOT];\n      }\n\n      return root;\n    }()\n    /**\n     * Returns the wrapped component.\n     *\n     * @return {ReactComponent}\n     */\n\n  }, {\n    key: 'getNodeInternal',\n    value: function () {\n      function getNodeInternal() {\n        if (this.length !== 1) {\n          throw new Error('ReactWrapper::getNode() can only be called when wrapping one node');\n        }\n\n        return this[NODES][0];\n      }\n\n      return getNodeInternal;\n    }()\n    /**\n     * Returns the the wrapped components.\n     *\n     * @return {Array<ReactComponent>}\n     */\n\n  }, {\n    key: 'getNodesInternal',\n    value: function () {\n      function getNodesInternal() {\n        return this[NODES];\n      }\n\n      return getNodesInternal;\n    }()\n    /**\n     * Returns the wrapped ReactElement.\n     *\n     * @return {ReactElement}\n     */\n\n  }, {\n    key: 'getElement',\n    value: function () {\n      function getElement() {\n        var _this = this;\n\n        return this.single('getElement', function () {\n          return (0, _getAdapter2['default'])(_this[OPTIONS]).nodeToElement(_this[NODE]);\n        });\n      }\n\n      return getElement;\n    }()\n    /**\n     * Returns the wrapped ReactElements.\n     *\n     * @return {Array<ReactElement>}\n     */\n\n  }, {\n    key: 'getElements',\n    value: function () {\n      function getElements() {\n        var _this2 = this;\n\n        return this[NODES].map(function (n) {\n          return (0, _getAdapter2['default'])(_this2[OPTIONS]).nodeToElement(n);\n        });\n      }\n\n      return getElements;\n    }() // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: 'getNode',\n    value: function () {\n      function getNode() {\n        throw new Error('ReactWrapper::getNode() is no longer supported. Use ReactWrapper::instance() instead');\n      }\n\n      return getNode;\n    }() // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: 'getNodes',\n    value: function () {\n      function getNodes() {\n        throw new Error('ReactWrapper::getNodes() is no longer supported.');\n      }\n\n      return getNodes;\n    }()\n    /**\n     * Returns the outer most DOMComponent of the current wrapper.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @returns {DOMComponent}\n     */\n\n  }, {\n    key: 'getDOMNode',\n    value: function () {\n      function getDOMNode() {\n        var adapter = (0, _getAdapter2['default'])(this[OPTIONS]);\n        return this.single('getDOMNode', function (n) {\n          return adapter.nodeToHostNode(n, true);\n        });\n      }\n\n      return getDOMNode;\n    }()\n    /**\n     * If the root component contained a ref, you can access it here and get the relevant\n     * react component instance or HTML element instance.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * @param {String} refname\n     * @returns {ReactComponent | HTMLElement}\n     */\n\n  }, {\n    key: 'ref',\n    value: function () {\n      function ref(refname) {\n        if (this[ROOT] !== this) {\n          throw new Error('ReactWrapper::ref(refname) can only be called on the root');\n        }\n\n        return this.instance().refs[refname];\n      }\n\n      return ref;\n    }()\n    /**\n     * Returns the wrapper's underlying instance.\n     *\n     * Example:\n     * ```\n     * const wrapper = mount(<MyComponent />);\n     * const inst = wrapper.instance();\n     * expect(inst).to.be.instanceOf(MyComponent);\n     * ```\n     * @returns {ReactComponent|DOMComponent}\n     */\n\n  }, {\n    key: 'instance',\n    value: function () {\n      function instance() {\n        var _this3 = this;\n\n        return this.single('instance', function () {\n          return _this3[NODE].instance;\n        });\n      }\n\n      return instance;\n    }()\n    /**\n     * If a `wrappingComponent` was passed in `options`, this methods returns a `ReactWrapper` around\n     * the rendered `wrappingComponent`. This `ReactWrapper` can be used to update the\n     * `wrappingComponent`'s props, state, etc.\n     *\n     * @returns ReactWrapper\n     */\n\n  }, {\n    key: 'getWrappingComponent',\n    value: function () {\n      function getWrappingComponent() {\n        if (this[ROOT] !== this) {\n          throw new Error('ReactWrapper::getWrappingComponent() can only be called on the root');\n        }\n\n        if (!this[OPTIONS].wrappingComponent) {\n          throw new Error('ReactWrapper::getWrappingComponent() can only be called on a wrapper that was originally passed a `wrappingComponent` option');\n        }\n\n        return this[WRAPPING_COMPONENT];\n      }\n\n      return getWrappingComponent;\n    }()\n    /**\n     * Forces a re-render. Useful to run before checking the render output if something external\n     * may be updating the state of the component somewhere.\n     *\n     * NOTE: no matter what instance this is called on, it will always update the root.\n     *\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'update',\n    value: function () {\n      function update() {\n        var _this4 = this;\n\n        var root = this[ROOT];\n\n        if (this !== root) {\n          return root.update();\n        }\n\n        privateSetNodes(this, this[RENDERER].getNode());\n        this[LINKED_ROOTS].forEach(function (linkedRoot) {\n          if (linkedRoot !== _this4[UPDATED_BY]) {\n            /* eslint-disable no-param-reassign */\n            // Only update a linked it root if it is not the originator of our update().\n            // This is needed to prevent infinite recursion when there is a bi-directional\n            // link between two roots.\n            linkedRoot[UPDATED_BY] = _this4;\n\n            try {\n              linkedRoot.update();\n            } finally {\n              linkedRoot[UPDATED_BY] = null;\n            }\n          }\n        });\n        return this;\n      }\n\n      return update;\n    }()\n    /**\n     * A method that unmounts the component. This can be used to simulate a component going through\n     * and unmount/mount lifecycle.\n     *\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'unmount',\n    value: function () {\n      function unmount() {\n        var _this5 = this;\n\n        if (this[ROOT] !== this) {\n          throw new Error('ReactWrapper::unmount() can only be called on the root');\n        }\n\n        this.single('unmount', function () {\n          _this5[RENDERER].unmount();\n\n          _this5.update();\n        });\n        return this;\n      }\n\n      return unmount;\n    }()\n    /**\n     * A method that re-mounts the component, if it is not currently mounted.\n     * This can be used to simulate a component going through\n     * an unmount/mount lifecycle.\n     *\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'mount',\n    value: function () {\n      function mount() {\n        var _this6 = this;\n\n        if (this[ROOT] !== this) {\n          throw new Error('ReactWrapper::mount() can only be called on the root');\n        }\n\n        this[RENDERER].render(this[UNRENDERED], this[OPTIONS].context, function () {\n          return _this6.update();\n        });\n        return this;\n      }\n\n      return mount;\n    }()\n    /**\n     * A method that sets the props of the root component, and re-renders. Useful for when you are\n     * wanting to test how the component behaves over time with changing props. Calling this, for\n     * instance, will call the `componentWillReceiveProps` lifecycle method.\n     *\n     * Similar to `setState`, this method accepts a props object and will merge it in with the already\n     * existing props.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * @param {Object} props object\n     * @param {Function} cb - callback function\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'setProps',\n    value: function () {\n      function setProps(props) {\n        var _this7 = this;\n\n        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n        if (this[ROOT] !== this) {\n          throw new Error('ReactWrapper::setProps() can only be called on the root');\n        }\n\n        if (arguments.length > 1 && typeof callback !== 'function') {\n          throw new TypeError('ReactWrapper::setProps() expects a function as its second argument');\n        }\n\n        var adapter = (0, _getAdapter2['default'])(this[OPTIONS]);\n        this[UNRENDERED] = (0, _Utils.cloneElement)(adapter, this[UNRENDERED], props);\n        this[RENDERER].render(this[UNRENDERED], null, function () {\n          _this7.update();\n\n          if (callback) {\n            callback();\n          }\n        });\n        return this;\n      }\n\n      return setProps;\n    }()\n    /**\n     * A method to invoke `setState` on the root component instance similar to how you might in the\n     * definition of the component, and re-renders.  This method is useful for testing your component\n     * in hard to achieve states, however should be used sparingly. If possible, you should utilize\n     * your component's external API in order to get it into whatever state you want to test, in order\n     * to be as accurate of a test as possible. This is not always practical, however.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * @param {Object} state to merge\n     * @param {Function} cb - callback function\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'setState',\n    value: function () {\n      function setState(state) {\n        var _this8 = this;\n\n        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n        if (this.instance() === null || this.getNodeInternal().nodeType !== 'class') {\n          throw new Error('ReactWrapper::setState() can only be called on class components');\n        }\n\n        if (arguments.length > 1 && typeof callback !== 'function') {\n          throw new TypeError('ReactWrapper::setState() expects a function as its second argument');\n        }\n\n        this.instance().setState(state, function () {\n          _this8.update();\n\n          if (callback) {\n            var adapter = (0, _getAdapter2['default'])(_this8[OPTIONS]);\n\n            var instance = _this8.instance();\n\n            if (adapter.invokeSetStateCallback) {\n              adapter.invokeSetStateCallback(instance, callback);\n            } else {\n              callback.call(instance);\n            }\n          }\n        });\n        return this;\n      }\n\n      return setState;\n    }()\n    /**\n     * A method that sets the context of the root component, and re-renders. Useful for when you are\n     * wanting to test how the component behaves over time with changing contexts.\n     *\n     * NOTE: can only be called on a wrapper instance that is also the root instance.\n     *\n     * @param {Object} context object\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'setContext',\n    value: function () {\n      function setContext(context) {\n        var _this9 = this;\n\n        if (this[ROOT] !== this) {\n          throw new Error('ReactWrapper::setContext() can only be called on the root');\n        }\n\n        if (!this[OPTIONS].context) {\n          throw new Error('ReactWrapper::setContext() can only be called on a wrapper that was originally passed a context option');\n        }\n\n        this[RENDERER].render(this[UNRENDERED], context, function () {\n          return _this9.update();\n        });\n        return this;\n      }\n\n      return setContext;\n    }()\n    /**\n     * Whether or not a given react element exists in the mount render tree.\n     *\n     * Example:\n     * ```\n     * const wrapper = mount(<MyComponent />);\n     * expect(wrapper.contains(<div className=\"foo bar\" />)).to.equal(true);\n     * ```\n     *\n     * @param {ReactElement|Array<ReactElement>} nodeOrNodes\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'contains',\n    value: function () {\n      function contains(nodeOrNodes) {\n        var adapter = (0, _getAdapter2['default'])(this[OPTIONS]);\n        var predicate = Array.isArray(nodeOrNodes) ? function (other) {\n          return (0, _Utils.containsChildrenSubArray)(_Utils.nodeEqual, other, nodeOrNodes.map(function (node) {\n            return adapter.elementToNode(node);\n          }));\n        } : function (other) {\n          return (0, _Utils.nodeEqual)(adapter.elementToNode(nodeOrNodes), other);\n        };\n        return findWhereUnwrapped(this, predicate).length > 0;\n      }\n\n      return contains;\n    }()\n    /**\n     * Whether or not a given react element exists in the current render tree.\n     * It will determine if one of the wrappers element \"looks like\" the expected\n     * element by checking if all props of the expected element are present\n     * on the wrappers element and equals to each other.\n     *\n     * Example:\n     * ```\n     * // MyComponent outputs <div><div class=\"foo\">Hello</div></div>\n     * const wrapper = mount(<MyComponent />);\n     * expect(wrapper.containsMatchingElement(<div>Hello</div>)).to.equal(true);\n     * ```\n     *\n     * @param {ReactElement} node\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'containsMatchingElement',\n    value: function () {\n      function containsMatchingElement(node) {\n        var rstNode = (0, _getAdapter2['default'])(this[OPTIONS]).elementToNode(node);\n\n        var predicate = function () {\n          function predicate(other) {\n            return (0, _Utils.nodeMatches)(rstNode, other, function (a, b) {\n              return a <= b;\n            });\n          }\n\n          return predicate;\n        }();\n\n        return findWhereUnwrapped(this, predicate).length > 0;\n      }\n\n      return containsMatchingElement;\n    }()\n    /**\n     * Whether or not all the given react elements exist in the current render tree.\n     * It will determine if one of the wrappers element \"looks like\" the expected\n     * element by checking if all props of the expected element are present\n     * on the wrappers element and equals to each other.\n     *\n     * Example:\n     * ```\n     * const wrapper = mount(<MyComponent />);\n     * expect(wrapper.containsAllMatchingElements([\n     *   <div>Hello</div>,\n     *   <div>Goodbye</div>,\n     * ])).to.equal(true);\n     * ```\n     *\n     * @param {Array<ReactElement>} nodes\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'containsAllMatchingElements',\n    value: function () {\n      function containsAllMatchingElements(nodes) {\n        var _this10 = this;\n\n        if (!Array.isArray(nodes)) {\n          throw new TypeError('nodes should be an Array');\n        }\n\n        return nodes.every(function (node) {\n          return _this10.containsMatchingElement(node);\n        });\n      }\n\n      return containsAllMatchingElements;\n    }()\n    /**\n     * Whether or not one of the given react elements exists in the current render tree.\n     * It will determine if one of the wrappers element \"looks like\" the expected\n     * element by checking if all props of the expected element are present\n     * on the wrappers element and equals to each other.\n     *\n     * Example:\n     * ```\n     * const wrapper = mount(<MyComponent />);\n     * expect(wrapper.containsAnyMatchingElements([\n     *   <div>Hello</div>,\n     *   <div>Goodbye</div>,\n     * ])).to.equal(true);\n     * ```\n     *\n     * @param {Array<ReactElement>} nodes\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'containsAnyMatchingElements',\n    value: function () {\n      function containsAnyMatchingElements(nodes) {\n        var _this11 = this;\n\n        return Array.isArray(nodes) && nodes.some(function (node) {\n          return _this11.containsMatchingElement(node);\n        });\n      }\n\n      return containsAnyMatchingElements;\n    }()\n    /**\n     * Whether or not a given react element exists in the render tree.\n     *\n     * Example:\n     * ```\n     * const wrapper = mount(<MyComponent />);\n     * expect(wrapper.contains(<div className=\"foo bar\" />)).to.equal(true);\n     * ```\n     *\n     * @param {ReactElement} node\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'equals',\n    value: function () {\n      function equals(node) {\n        var _this12 = this;\n\n        return this.single('equals', function () {\n          return (0, _Utils.nodeEqual)(_this12.getNodeInternal(), node);\n        });\n      }\n\n      return equals;\n    }()\n    /**\n     * Whether or not a given react element matches the render tree.\n     * Match is based on the expected element and not on wrapper root node.\n     * It will determine if the wrapper root node \"looks like\" the expected\n     * element by checking if all props of the expected element are present\n     * on the wrapper root node and equals to each other.\n     *\n     * Example:\n     * ```\n     * // MyComponent outputs <div class=\"foo\">Hello</div>\n     * const wrapper = mount(<MyComponent />);\n     * expect(wrapper.matchesElement(<div>Hello</div>)).to.equal(true);\n     * ```\n     *\n     * @param {ReactElement} node\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'matchesElement',\n    value: function () {\n      function matchesElement(node) {\n        var _this13 = this;\n\n        return this.single('matchesElement', function () {\n          var adapter = (0, _getAdapter2['default'])(_this13[OPTIONS]);\n          var rstNode = adapter.elementToNode(node);\n          return (0, _Utils.nodeMatches)(rstNode, _this13.getNodeInternal(), function (a, b) {\n            return a <= b;\n          });\n        });\n      }\n\n      return matchesElement;\n    }()\n    /**\n     * Finds every node in the render tree of the current wrapper that matches the provided selector.\n     *\n     * @param {EnzymeSelector} selector\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'find',\n    value: function () {\n      function find(selector) {\n        return this.wrap((0, _selectors.reduceTreesBySelector)(selector, this.getNodesInternal()));\n      }\n\n      return find;\n    }()\n    /**\n     * Returns whether or not current node matches a provided selector.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @param {EnzymeSelector} selector\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'is',\n    value: function () {\n      function is(selector) {\n        var predicate = (0, _selectors.buildPredicate)(selector);\n        return this.single('is', function (n) {\n          return predicate(n);\n        });\n      }\n\n      return is;\n    }()\n    /**\n     * Returns true if the component rendered nothing, i.e., null or false.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isEmptyRender',\n    value: function () {\n      function isEmptyRender() {\n        var nodes = this.getNodeInternal();\n        return (0, _Utils.renderedDive)(nodes);\n      }\n\n      return isEmptyRender;\n    }()\n    /**\n     * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n     * the provided predicate function.\n     *\n     * @param {Function} predicate\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'filterWhere',\n    value: function () {\n      function filterWhere(predicate) {\n        var _this14 = this;\n\n        return filterWhereUnwrapped(this, function (n) {\n          return predicate(_this14.wrap(n));\n        });\n      }\n\n      return filterWhere;\n    }()\n    /**\n     * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n     * the provided selector.\n     *\n     * @param {EnzymeSelector} selector\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'filter',\n    value: function () {\n      function filter(selector) {\n        var predicate = (0, _selectors.buildPredicate)(selector);\n        return filterWhereUnwrapped(this, predicate);\n      }\n\n      return filter;\n    }()\n    /**\n     * Returns a new wrapper instance with only the nodes of the current wrapper that did not match\n     * the provided selector. Essentially the inverse of `filter`.\n     *\n     * @param {EnzymeSelector} selector\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'not',\n    value: function () {\n      function not(selector) {\n        var predicate = (0, _selectors.buildPredicate)(selector);\n        return filterWhereUnwrapped(this, function (n) {\n          return !predicate(n);\n        });\n      }\n\n      return not;\n    }()\n    /**\n     * Returns a string of the rendered text of the current render tree.  This function should be\n     * looked at with skepticism if being used to test what the actual HTML output of the component\n     * will be. If that is what you would like to test, use enzyme's `render` function instead.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: 'text',\n    value: function () {\n      function text() {\n        var adapter = (0, _getAdapter2['default'])(this[OPTIONS]);\n        return this.single('text', function (n) {\n          return (0, _RSTTraversal.getTextFromHostNodes)(n, adapter);\n        });\n      }\n\n      return text;\n    }()\n    /**\n     * Returns the HTML of the node.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: 'html',\n    value: function () {\n      function html() {\n        var adapter = (0, _getAdapter2['default'])(this[OPTIONS]);\n        return this.single('html', function (n) {\n          return (0, _RSTTraversal.getHTMLFromHostNodes)(n, adapter);\n        });\n      }\n\n      return html;\n    }()\n    /**\n     * Returns the current node rendered to HTML and wrapped in a CheerioWrapper.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @returns {CheerioWrapper}\n     */\n\n  }, {\n    key: 'render',\n    value: function () {\n      function render() {\n        var html = this.html();\n        return (0, _Utils.loadCheerioRoot)(html);\n      }\n\n      return render;\n    }()\n    /**\n     * Used to simulate events. Pass an eventname and (optionally) event arguments. This method of\n     * testing events should be met with some skepticism.\n     *\n     * @param {String} event\n     * @param {Object} mock (optional)\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'simulate',\n    value: function () {\n      function simulate(event) {\n        var _this15 = this;\n\n        var mock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.single('simulate', function (n) {\n          _this15[RENDERER].simulateEvent(n, event, mock);\n\n          _this15[ROOT].update();\n\n          return _this15;\n        });\n      }\n\n      return simulate;\n    }()\n    /**\n     * Used to simulate throwing a rendering error. Pass an error to throw.\n     *\n     * @param {String} error\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'simulateError',\n    value: function () {\n      function simulateError(error) {\n        var _this16 = this;\n\n        if (this[ROOT] === this) {\n          throw new Error('ReactWrapper::simulateError() may not be called on the root');\n        }\n\n        return this.single('simulateError', function (thisNode) {\n          if (thisNode.nodeType === 'host') {\n            throw new Error('ReactWrapper::simulateError() can only be called on custom components');\n          }\n\n          var renderer = _this16[RENDERER];\n\n          if (typeof renderer.simulateError !== 'function') {\n            throw new TypeError('your adapter does not support `simulateError`. Try upgrading it!');\n          }\n\n          var rootNode = getRootNodeInternal(_this16);\n          var nodeHierarchy = [thisNode].concat(nodeParents(_this16, thisNode));\n          renderer.simulateError(nodeHierarchy, rootNode, error);\n\n          _this16[ROOT].update();\n\n          return _this16;\n        });\n      }\n\n      return simulateError;\n    }()\n    /**\n     * Returns the props hash for the root node of the wrapper.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'props',\n    value: function () {\n      function props() {\n        return this.single('props', _RSTTraversal.propsOfNode);\n      }\n\n      return props;\n    }()\n    /**\n     * Returns the state hash for the root node of the wrapper. Optionally pass in a prop name and it\n     * will return just that value.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @param {String} name (optional)\n     * @returns {*}\n     */\n\n  }, {\n    key: 'state',\n    value: function () {\n      function state(name) {\n        var _this17 = this;\n\n        var thisNode = this[ROOT] === this ? this[RENDERER].getNode() : this.getNodeInternal();\n\n        if (this.instance() === null || thisNode.nodeType !== 'class') {\n          throw new Error('ReactWrapper::state() can only be called on class components');\n        }\n\n        var _state = this.single('state', function () {\n          return _this17.instance().state;\n        });\n\n        if (typeof name !== 'undefined') {\n          if (_state == null) {\n            throw new TypeError('ReactWrapper::state(\"' + String(name) + '\") requires that `state` not be `null` or `undefined`');\n          }\n\n          return _state[name];\n        }\n\n        return _state;\n      }\n\n      return state;\n    }()\n    /**\n     * Returns the context hash for the root node of the wrapper.\n     * Optionally pass in a prop name and it will return just that value.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @param {String} name (optional)\n     * @returns {*}\n     */\n\n  }, {\n    key: 'context',\n    value: function () {\n      function context(name) {\n        var _this18 = this;\n\n        if (this[ROOT] !== this) {\n          throw new Error('ReactWrapper::context() can only be called on the root');\n        }\n\n        var instance = this.single('context', function () {\n          return _this18.instance();\n        });\n\n        if (instance === null) {\n          throw new Error('ReactWrapper::context() can only be called on components with instances');\n        }\n\n        var _context = instance.context;\n\n        if (typeof name !== 'undefined') {\n          return _context[name];\n        }\n\n        return _context;\n      }\n\n      return context;\n    }()\n    /**\n     * Returns a new wrapper with all of the children of the current wrapper.\n     *\n     * @param {EnzymeSelector} [selector]\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'children',\n    value: function () {\n      function children(selector) {\n        var allChildren = this.flatMap(function (n) {\n          return (0, _RSTTraversal.childrenOfNode)(n.getNodeInternal());\n        });\n        return selector ? allChildren.filter(selector) : allChildren;\n      }\n\n      return children;\n    }()\n    /**\n     * Returns a new wrapper with a specific child\n     *\n     * @param {Number} [index]\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'childAt',\n    value: function () {\n      function childAt(index) {\n        var _this19 = this;\n\n        return this.single('childAt', function () {\n          return _this19.children().at(index);\n        });\n      }\n\n      return childAt;\n    }()\n    /**\n     * Returns a wrapper around all of the parents/ancestors of the wrapper. Does not include the node\n     * in the current wrapper.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @param {EnzymeSelector} [selector]\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'parents',\n    value: function () {\n      function parents(selector) {\n        var _this20 = this;\n\n        return this.single('parents', function (n) {\n          var allParents = _this20.wrap(nodeParents(_this20, n));\n\n          return selector ? allParents.filter(selector) : allParents;\n        });\n      }\n\n      return parents;\n    }()\n    /**\n     * Returns a wrapper around the immediate parent of the current node.\n     *\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'parent',\n    value: function () {\n      function parent() {\n        return this.flatMap(function (n) {\n          return [n.parents().get(0)];\n        });\n      }\n\n      return parent;\n    }()\n    /**\n     *\n     * @param {EnzymeSelector} selector\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'closest',\n    value: function () {\n      function closest(selector) {\n        if (this.is(selector)) {\n          return this;\n        }\n\n        var matchingAncestors = this.parents().filter(selector);\n        return matchingAncestors.length > 0 ? matchingAncestors.first() : this.findWhere(function () {\n          return false;\n        });\n      }\n\n      return closest;\n    }()\n    /**\n     * Returns the value of  prop with the given name of the root node.\n     *\n     * @param {String} propName\n     * @returns {*}\n     */\n\n  }, {\n    key: 'prop',\n    value: function () {\n      function prop(propName) {\n        return this.props()[propName];\n      }\n\n      return prop;\n    }()\n    /**\n     * Used to invoke a function prop.\n     * Will invoke an function prop and return its value.\n     *\n     * @param {String} propName\n     * @returns {Any}\n     */\n\n  }, {\n    key: 'invoke',\n    value: function () {\n      function invoke(propName) {\n        var _this21 = this;\n\n        return this.single('invoke', function () {\n          var handler = _this21.prop(propName);\n\n          if (typeof handler !== 'function') {\n            throw new TypeError('ReactWrapper::invoke() requires the name of a prop whose value is a function');\n          }\n\n          return function () {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            var response = typeof _this21[RENDERER].wrapInvoke === 'function' ? _this21[RENDERER].wrapInvoke(function () {\n              return handler.apply(undefined, args);\n            }) : handler.apply(undefined, args);\n\n            _this21[ROOT].update();\n\n            return response;\n          };\n        });\n      }\n\n      return invoke;\n    }()\n    /**\n     * Returns a wrapper of the node rendered by the provided render prop.\n     *\n     * @param {String} propName\n     * @returns {Function}\n     */\n\n  }, {\n    key: 'renderProp',\n    value: function () {\n      function renderProp(propName) {\n        var _this22 = this;\n\n        var adapter = (0, _getAdapter2['default'])(this[OPTIONS]);\n\n        if (typeof adapter.wrap !== 'function') {\n          throw new RangeError('your adapter does not support `wrap`. Try upgrading it!');\n        }\n\n        return this.single('renderProp', function (n) {\n          if (n.nodeType === 'host') {\n            throw new TypeError('ReactWrapper::renderProp() can only be called on custom components');\n          }\n\n          if (typeof propName !== 'string') {\n            throw new TypeError('ReactWrapper::renderProp(): `propName` must be a string');\n          }\n\n          var props = _this22.props();\n\n          if (!(0, _has2['default'])(props, propName)) {\n            throw new Error('ReactWrapper::renderProp(): no prop called \\u201C' + String(propName) + '\\u201C found');\n          }\n\n          var propValue = props[propName];\n\n          if (typeof propValue !== 'function') {\n            throw new TypeError('ReactWrapper::renderProp(): expected prop \\u201C' + String(propName) + '\\u201C to contain a function, but it holds \\u201C' + (typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue)) + '\\u201C');\n          }\n\n          return function () {\n            var element = propValue.apply(undefined, arguments);\n            var wrapped = adapter.wrap(element);\n            return _this22.wrap(wrapped, null, _this22[OPTIONS]);\n          };\n        });\n      }\n\n      return renderProp;\n    }()\n    /**\n     * Returns the key assigned to the current node.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: 'key',\n    value: function () {\n      function key() {\n        return this.single('key', function (n) {\n          return n.key === undefined ? null : n.key;\n        });\n      }\n\n      return key;\n    }()\n    /**\n     * Returns the type of the root node of this wrapper. If it's a composite component, this will be\n     * the component constructor. If it's native DOM node, it will be a string.\n     *\n     * @returns {String|Function}\n     */\n\n  }, {\n    key: 'type',\n    value: function () {\n      function type() {\n        return this.single('type', function (n) {\n          return (0, _Utils.typeOfNode)(n);\n        });\n      }\n\n      return type;\n    }()\n    /**\n     * Returns the name of the root node of this wrapper.\n     *\n     * In order of precedence => type.displayName -> type.name -> type.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: 'name',\n    value: function () {\n      function name() {\n        var adapter = (0, _getAdapter2['default'])(this[OPTIONS]);\n        return this.single('name', function (n) {\n          return adapter.displayNameOfNode ? adapter.displayNameOfNode(n) : (0, _Utils.displayNameOfNode)(n);\n        });\n      }\n\n      return name;\n    }()\n    /**\n     * Returns whether or not the current root node has the given class name or not.\n     *\n     * NOTE: can only be called on a wrapper of a single node.\n     *\n     * @param {String} className\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'hasClass',\n    value: function () {\n      function hasClass(className) {\n        if (typeof className === 'string' && className.indexOf('.') !== -1) {\n          // eslint-disable-next-line no-console\n          console.warn('It looks like you\\'re calling `ReactWrapper::hasClass()` with a CSS selector. hasClass() expects a class name, not a CSS selector.');\n        }\n\n        return this.single('hasClass', function (n) {\n          return (0, _RSTTraversal.hasClassName)(n, className);\n        });\n      }\n\n      return hasClass;\n    }()\n    /**\n     * Iterates through each node of the current wrapper and executes the provided function with a\n     * wrapper around the corresponding node passed in as the first argument.\n     *\n     * @param {Function} fn\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'forEach',\n    value: function () {\n      function forEach(fn) {\n        var _this23 = this;\n\n        this.getNodesInternal().forEach(function (n, i) {\n          return fn.call(_this23, _this23.wrap(n), i);\n        });\n        return this;\n      }\n\n      return forEach;\n    }()\n    /**\n     * Maps the current array of nodes to another array. Each node is passed in as a `ReactWrapper`\n     * to the map function.\n     *\n     * @param {Function} fn\n     * @returns {Array}\n     */\n\n  }, {\n    key: 'map',\n    value: function () {\n      function map(fn) {\n        var _this24 = this;\n\n        return this.getNodesInternal().map(function (n, i) {\n          return fn.call(_this24, _this24.wrap(n), i);\n        });\n      }\n\n      return map;\n    }()\n    /**\n     * Reduces the current array of nodes to another array.\n     * Each node is passed in as a `ShallowWrapper` to the reducer function.\n     *\n     * @param {Function} fn - the reducer function\n     * @param {*} initialValue - the initial value\n     * @returns {*}\n     */\n\n  }, {\n    key: 'reduce',\n    value: function () {\n      function reduce(fn) {\n        var _this25 = this;\n\n        var initialValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n        if (arguments.length > 1) {\n          return this.getNodesInternal().reduce(function (accum, n, i) {\n            return fn.call(_this25, accum, _this25.wrap(n), i);\n          }, initialValue);\n        }\n\n        return this.getNodesInternal().reduce(function (accum, n, i) {\n          return fn.call(_this25, i === 1 ? _this25.wrap(accum) : accum, _this25.wrap(n), i);\n        });\n      }\n\n      return reduce;\n    }()\n    /**\n     * Reduces the current array of nodes to another array, from right to left. Each node is passed\n     * in as a `ShallowWrapper` to the reducer function.\n     *\n     * @param {Function} fn - the reducer function\n     * @param {*} initialValue - the initial value\n     * @returns {*}\n     */\n\n  }, {\n    key: 'reduceRight',\n    value: function () {\n      function reduceRight(fn) {\n        var _this26 = this;\n\n        var initialValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n        if (arguments.length > 1) {\n          return this.getNodesInternal().reduceRight(function (accum, n, i) {\n            return fn.call(_this26, accum, _this26.wrap(n), i);\n          }, initialValue);\n        }\n\n        return this.getNodesInternal().reduceRight(function (accum, n, i) {\n          return fn.call(_this26, i === 1 ? _this26.wrap(accum) : accum, _this26.wrap(n), i);\n        });\n      }\n\n      return reduceRight;\n    }()\n    /**\n     * Returns a new wrapper with a subset of the nodes of the original wrapper, according to the\n     * rules of `Array#slice`.\n     *\n     * @param {Number} begin\n     * @param {Number} end\n     * @returns {ShallowWrapper}\n     */\n\n  }, {\n    key: 'slice',\n    value: function () {\n      function slice(begin, end) {\n        return this.wrap(this.getNodesInternal().slice(begin, end));\n      }\n\n      return slice;\n    }()\n    /**\n     * Returns whether or not any of the nodes in the wrapper match the provided selector.\n     *\n     * @param {EnzymeSelector} selector\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'some',\n    value: function () {\n      function some(selector) {\n        if (this[ROOT] === this) {\n          throw new Error('ReactWrapper::some() can not be called on the root');\n        }\n\n        var predicate = (0, _selectors.buildPredicate)(selector);\n        return this.getNodesInternal().some(predicate);\n      }\n\n      return some;\n    }()\n    /**\n     * Returns whether or not any of the nodes in the wrapper pass the provided predicate function.\n     *\n     * @param {Function} predicate\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'someWhere',\n    value: function () {\n      function someWhere(predicate) {\n        var _this27 = this;\n\n        return this.getNodesInternal().some(function (n, i) {\n          return predicate.call(_this27, _this27.wrap(n), i);\n        });\n      }\n\n      return someWhere;\n    }()\n    /**\n     * Returns whether or not all of the nodes in the wrapper match the provided selector.\n     *\n     * @param {EnzymeSelector} selector\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'every',\n    value: function () {\n      function every(selector) {\n        var predicate = (0, _selectors.buildPredicate)(selector);\n        return this.getNodesInternal().every(predicate);\n      }\n\n      return every;\n    }()\n    /**\n     * Returns whether or not any of the nodes in the wrapper pass the provided predicate function.\n     *\n     * @param {Function} predicate\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'everyWhere',\n    value: function () {\n      function everyWhere(predicate) {\n        var _this28 = this;\n\n        return this.getNodesInternal().every(function (n, i) {\n          return predicate.call(_this28, _this28.wrap(n), i);\n        });\n      }\n\n      return everyWhere;\n    }()\n    /**\n     * Utility method used to create new wrappers with a mapping function that returns an array of\n     * nodes in response to a single node wrapper. The returned wrapper is a single wrapper around\n     * all of the mapped nodes flattened (and de-duplicated).\n     *\n     * @param {Function} fn\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'flatMap',\n    value: function () {\n      function flatMap(fn) {\n        var _this29 = this;\n\n        var nodes = this.getNodesInternal().map(function (n, i) {\n          return fn.call(_this29, _this29.wrap(n), i);\n        });\n        var flattened = (0, _arrayPrototype2['default'])(nodes, 1);\n        return this.wrap(flattened.filter(Boolean));\n      }\n\n      return flatMap;\n    }()\n    /**\n     * Finds all nodes in the current wrapper nodes' render trees that match the provided predicate\n     * function.\n     *\n     * @param {Function} predicate\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'findWhere',\n    value: function () {\n      function findWhere(predicate) {\n        var _this30 = this;\n\n        return findWhereUnwrapped(this, function (n) {\n          var node = _this30.wrap(n);\n\n          return node.length > 0 && predicate(node);\n        });\n      }\n\n      return findWhere;\n    }()\n    /**\n     * Returns the node at a given index of the current wrapper.\n     *\n     * @param {Number} index\n     * @returns {ReactElement}\n     */\n\n  }, {\n    key: 'get',\n    value: function () {\n      function get(index) {\n        return this.getElements()[index];\n      }\n\n      return get;\n    }()\n    /**\n     * Returns a wrapper around the node at a given index of the current wrapper.\n     *\n     * @param {Number} index\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'at',\n    value: function () {\n      function at(index) {\n        var nodes = this.getNodesInternal();\n\n        if (index < nodes.length) {\n          return this.wrap(nodes[index]);\n        }\n\n        return this.wrap([]);\n      }\n\n      return at;\n    }()\n    /**\n     * Returns a wrapper around the first node of the current wrapper.\n     *\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'first',\n    value: function () {\n      function first() {\n        return this.at(0);\n      }\n\n      return first;\n    }()\n    /**\n     * Returns a wrapper around the last node of the current wrapper.\n     *\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'last',\n    value: function () {\n      function last() {\n        return this.at(this.length - 1);\n      }\n\n      return last;\n    }()\n    /**\n     * Delegates to exists()\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isEmpty',\n    value: function () {\n      function isEmpty() {\n        // eslint-disable-next-line no-console\n        console.warn('Enzyme::Deprecated method isEmpty() called, use exists() instead.');\n        return !this.exists();\n      }\n\n      return isEmpty;\n    }()\n    /**\n     * Returns true if the current wrapper has nodes. False otherwise.\n     * If called with a selector it returns `.find(selector).exists()` instead.\n     *\n     * @param {EnzymeSelector} selector (optional)\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'exists',\n    value: function () {\n      function exists() {\n        var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        return arguments.length > 0 ? this.find(selector).exists() : this.length > 0;\n      }\n\n      return exists;\n    }()\n    /**\n     * Utility method that throws an error if the current instance has a length other than one.\n     * This is primarily used to enforce that certain methods are only run on a wrapper when it is\n     * wrapping a single node.\n     *\n     * @param {Function} fn\n     * @returns {*}\n     */\n\n  }, {\n    key: 'single',\n    value: function () {\n      function single(name, fn) {\n        var fnName = typeof name === 'string' ? name : 'unknown';\n        var callback = typeof fn === 'function' ? fn : name;\n\n        if (this.length !== 1) {\n          throw new Error('Method \\u201C' + fnName + '\\u201D is meant to be run on 1 node. ' + String(this.length) + ' found instead.');\n        }\n\n        return callback.call(this, this.getNodeInternal());\n      }\n\n      return single;\n    }()\n    /**\n     * Helpful utility method to create a new wrapper with the same root as the current wrapper, with\n     * any nodes passed in as the first parameter automatically wrapped.\n     *\n     * @param {ReactWrapper|ReactElement|Array<ReactElement>} node\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'wrap',\n    value: function () {\n      function wrap(node) {\n        var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this[ROOT];\n\n        if (node instanceof ReactWrapper) {\n          return node;\n        }\n\n        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n          args[_key2 - 2] = arguments[_key2];\n        }\n\n        return new (Function.prototype.bind.apply(ReactWrapper, [null].concat([node, root], args)))();\n      }\n\n      return wrap;\n    }()\n    /**\n     * Returns an HTML-like string of the shallow render for debugging purposes.\n     *\n     * @param {Object} [options] - Property bag of additional options.\n     * @param {boolean} [options.ignoreProps] - if true, props are omitted from the string.\n     * @param {boolean} [options.verbose] - if true, arrays and objects to be verbosely printed.\n     * @returns {String}\n     */\n\n  }, {\n    key: 'debug',\n    value: function () {\n      function debug() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return (0, _Debug.debugNodes)(this.getNodesInternal(), options);\n      }\n\n      return debug;\n    }()\n    /**\n     * Invokes intercepter and returns itself. intercepter is called with itself.\n     * This is helpful when debugging nodes in method chains.\n     * @param fn\n     * @returns {ReactWrapper}\n     */\n\n  }, {\n    key: 'tap',\n    value: function () {\n      function tap(intercepter) {\n        intercepter(this);\n        return this;\n      }\n\n      return tap;\n    }()\n    /**\n     * Detaches the react tree from the DOM. Runs `ReactDOM.unmountComponentAtNode()` under the hood.\n     *\n     * This method will most commonly be used as a \"cleanup\" method if you decide to use the\n     * `attachTo` option in `mount(node, options)`.\n     *\n     * The method is intentionally not \"fluent\" (in that it doesn't return `this`) because you should\n     * not be doing anything with this wrapper after this method is called.\n     */\n\n  }, {\n    key: 'detach',\n    value: function () {\n      function detach() {\n        if (this[ROOT] !== this) {\n          throw new Error('ReactWrapper::detach() can only be called on the root');\n        }\n\n        if (!this[OPTIONS].attachTo) {\n          throw new Error('ReactWrapper::detach() can only be called on when the `attachTo` option was passed into `mount()`.');\n        }\n\n        this[RENDERER].unmount();\n      }\n\n      return detach;\n    }()\n    /**\n     * Strips out all the not host-nodes from the list of nodes\n     *\n     * This method is useful if you want to check for the presence of host nodes\n     * (actually rendered HTML elements) ignoring the React nodes.\n     */\n\n  }, {\n    key: 'hostNodes',\n    value: function () {\n      function hostNodes() {\n        return this.filterWhere(function (n) {\n          return typeof n.type() === 'string';\n        });\n      }\n\n      return hostNodes;\n    }()\n  }]);\n\n  return ReactWrapper;\n}();\n/**\n * A *special* \"root\" wrapper that represents the component passed as `wrappingComponent`.\n * It is linked to the primary root such that updates to it will update the primary,\n * and vice versa.\n *\n * @class WrappingComponentWrapper\n */\n\n\nvar WrappingComponentWrapper = function (_ReactWrapper) {\n  _inherits(WrappingComponentWrapper, _ReactWrapper);\n  /* eslint-disable class-methods-use-this */\n\n\n  function WrappingComponentWrapper(root, renderer) {\n    _classCallCheck(this, WrappingComponentWrapper);\n\n    var _this31 = _possibleConstructorReturn(this, (WrappingComponentWrapper.__proto__ || Object.getPrototypeOf(WrappingComponentWrapper)).call(this, renderer.getNode(), root));\n\n    (0, _Utils.privateSet)(_this31, ROOT, _this31);\n    (0, _Utils.privateSet)(_this31, RENDERER, renderer);\n\n    _this31[LINKED_ROOTS].push(root);\n\n    return _this31;\n  }\n\n  _createClass(WrappingComponentWrapper, [{\n    key: 'getWrappingComponent',\n    value: function () {\n      function getWrappingComponent() {\n        throw new TypeError('ReactWrapper::getWrappingComponent() can only be called on the root');\n      }\n\n      return getWrappingComponent;\n    }()\n  }]);\n\n  return WrappingComponentWrapper;\n}(ReactWrapper);\n\nif (_Utils.ITERATOR_SYMBOL) {\n  Object.defineProperty(ReactWrapper.prototype, _Utils.ITERATOR_SYMBOL, {\n    configurable: true,\n    value: function () {\n      function iterator() {\n        var _ref;\n\n        var iter = this[NODES][_Utils.ITERATOR_SYMBOL]();\n\n        var adapter = (0, _getAdapter2['default'])(this[OPTIONS]);\n        return _ref = {}, _defineProperty(_ref, _Utils.ITERATOR_SYMBOL, function () {\n          return this;\n        }), _defineProperty(_ref, 'next', function () {\n          function next() {\n            var next = iter.next();\n\n            if (next.done) {\n              return {\n                done: true\n              };\n            }\n\n            return {\n              done: false,\n              value: adapter.nodeToElement(next.value)\n            };\n          }\n\n          return next;\n        }()), _ref;\n      }\n\n      return iterator;\n    }()\n  });\n}\n\nfunction privateWarning(prop, extraMessage) {\n  Object.defineProperty(ReactWrapper.prototype, prop, {\n    get: function () {\n      function get() {\n        throw new Error('\\n        Attempted to access ReactWrapper::' + String(prop) + ', which was previously a private property on\\n        Enzyme ReactWrapper instances, but is no longer and should not be relied upon.\\n        ' + String(extraMessage) + '\\n      ');\n      }\n\n      return get;\n    }(),\n    enumerable: false,\n    configurable: false\n  });\n}\n\nprivateWarning('node', 'Consider using the getElement() method instead.');\nprivateWarning('nodes', 'Consider using the getElements() method instead.');\nprivateWarning('renderer', '');\nprivateWarning('options', '');\nprivateWarning('complexSelector', '');\nexports['default'] = ReactWrapper; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"mappings":"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","names":["NODE","NODES","RENDERER","UNRENDERED","ROOT","OPTIONS","ROOT_NODES","WRAPPING_COMPONENT","LINKED_ROOTS","UPDATED_BY","findWhereUnwrapped","wrapper","predicate","filter","treeFilter","flatMap","n","getNodeInternal","filterWhereUnwrapped","wrap","getNodesInternal","Boolean","getRootNodeInternal","length","Error","nodeParents","node","privateSetNodes","nodes","Array","isArray","ReactWrapper","root","passedOptions","_classCallCheck","global","window","document","options","adapter","isValidElement","TypeError","renderer","createRenderer","mode","render","context","getNode","wrappingComponent","getWrappingComponentRenderer","WrappingComponentWrapper","push","single","_this","nodeToElement","map","_this2","nodeToHostNode","refname","instance","refs","_this3","update","forEach","linkedRoot","_this4","_this5","unmount","_this6","props","callback","undefined","arguments","_this7","state","nodeType","setState","_this8","invokeSetStateCallback","call","_this9","nodeOrNodes","other","nodeEqual","elementToNode","rstNode","a","b","every","_this10","containsMatchingElement","some","_this11","_this12","_this13","selector","_this14","html","event","mock","_this15","simulateEvent","error","thisNode","_this16","simulateError","rootNode","nodeHierarchy","concat","propsOfNode","name","_state","_this17","_this18","_context","allChildren","index","_this19","children","at","allParents","_this20","parents","get","is","matchingAncestors","first","findWhere","propName","handler","_this21","prop","args","response","wrapInvoke","RangeError","_this22","propValue","element","wrapped","key","displayNameOfNode","className","indexOf","console","warn","fn","i","_this23","_this24","initialValue","reduce","accum","_this25","reduceRight","_this26","begin","end","slice","_this27","_this28","_this29","flattened","_this30","getElements","exists","find","fnName","intercepter","attachTo","filterWhere","type","_this31","ITERATOR_SYMBOL","Object","defineProperty","prototype","configurable","value","iterator","iter","next","done","privateWarning","extraMessage","enumerable"],"sources":["/Users/sebas/Desktop/robofriends-testing/node_modules/enzyme/src/ReactWrapper.js"],"sourcesContent":["import flat from 'array.prototype.flat';\nimport has from 'has';\n\nimport {\n  containsChildrenSubArray,\n  typeOfNode,\n  displayNameOfNode,\n  ITERATOR_SYMBOL,\n  nodeEqual,\n  nodeMatches,\n  makeOptions,\n  sym,\n  privateSet,\n  cloneElement,\n  renderedDive,\n  isCustomComponent,\n  loadCheerioRoot,\n} from './Utils';\nimport getAdapter from './getAdapter';\nimport { debugNodes } from './Debug';\nimport {\n  propsOfNode,\n  hasClassName,\n  childrenOfNode,\n  parentsOfNode,\n  treeFilter,\n  getTextFromHostNodes,\n  getHTMLFromHostNodes,\n} from './RSTTraversal';\n\nimport { buildPredicate, reduceTreesBySelector } from './selectors';\n\nconst NODE = sym('__node__');\nconst NODES = sym('__nodes__');\nconst RENDERER = sym('__renderer__');\nconst UNRENDERED = sym('__unrendered__');\nconst ROOT = sym('__root__');\nconst OPTIONS = sym('__options__');\nconst ROOT_NODES = sym('__rootNodes__');\nconst WRAPPING_COMPONENT = sym('__wrappingComponent__');\nconst LINKED_ROOTS = sym('__linkedRoots__');\nconst UPDATED_BY = sym('__updatedBy__');\n\n/**\n * Finds all nodes in the current wrapper nodes' render trees that match the provided predicate\n * function.\n *\n * @param {ReactWrapper} wrapper\n * @param {Function} predicate\n * @param {Function} filter\n * @returns {ReactWrapper}\n */\nfunction findWhereUnwrapped(wrapper, predicate, filter = treeFilter) {\n  return wrapper.flatMap((n) => filter(n.getNodeInternal(), predicate));\n}\n\n/**\n * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n * the provided predicate function.\n *\n * @param {ReactWrapper} wrapper\n * @param {Function} predicate\n * @returns {ReactWrapper}\n */\nfunction filterWhereUnwrapped(wrapper, predicate) {\n  return wrapper.wrap(wrapper.getNodesInternal().filter(predicate).filter(Boolean));\n}\n\nfunction getRootNodeInternal(wrapper) {\n  if (wrapper[ROOT].length !== 1) {\n    throw new Error('getRootNodeInternal(wrapper) can only be called when wrapper wraps one node');\n  }\n  if (wrapper[ROOT] !== wrapper) {\n    return wrapper[ROOT_NODES][0];\n  }\n  return wrapper[ROOT][NODE];\n}\n\nfunction nodeParents(wrapper, node) {\n  return parentsOfNode(node, getRootNodeInternal(wrapper));\n}\n\nfunction privateSetNodes(wrapper, nodes) {\n  if (!nodes) {\n    privateSet(wrapper, NODE, null);\n    privateSet(wrapper, NODES, []);\n  } else if (!Array.isArray(nodes)) {\n    privateSet(wrapper, NODE, nodes);\n    privateSet(wrapper, NODES, [nodes]);\n  } else {\n    privateSet(wrapper, NODE, nodes[0]);\n    privateSet(wrapper, NODES, nodes);\n  }\n  privateSet(wrapper, 'length', wrapper[NODES].length);\n}\n\n/**\n * @class ReactWrapper\n */\nclass ReactWrapper {\n  constructor(nodes, root, passedOptions = {}) {\n    if (!global.window && !global.document) {\n      throw new Error('It looks like you called `mount()` without a global document being loaded.');\n    }\n    const options = makeOptions(passedOptions);\n\n    if (!root) {\n      const adapter = getAdapter(options);\n      if (!adapter.isValidElement(nodes)) {\n        throw new TypeError('ReactWrapper can only wrap valid elements');\n      }\n\n      const renderer = adapter.createRenderer({ mode: 'mount', ...options });\n      privateSet(this, RENDERER, renderer);\n      renderer.render(nodes, options.context);\n      privateSet(this, ROOT, this);\n      privateSetNodes(this, this[RENDERER].getNode());\n      privateSet(this, OPTIONS, options);\n      privateSet(this, LINKED_ROOTS, []);\n\n      if (isCustomComponent(options.wrappingComponent, adapter)) {\n        if (typeof this[RENDERER].getWrappingComponentRenderer !== 'function') {\n          throw new TypeError('your adapter does not support `wrappingComponent`. Try upgrading it!');\n        }\n\n        // eslint-disable-next-line no-use-before-define\n        privateSet(this, WRAPPING_COMPONENT, new WrappingComponentWrapper(\n          this, this[RENDERER].getWrappingComponentRenderer(),\n        ));\n        this[LINKED_ROOTS].push(this[WRAPPING_COMPONENT]);\n      }\n    } else {\n      privateSet(this, RENDERER, root[RENDERER]);\n      privateSet(this, ROOT, root);\n      privateSetNodes(this, nodes);\n      privateSet(this, ROOT_NODES, root[NODES]);\n      privateSet(this, OPTIONS, root[OPTIONS]);\n      privateSet(this, LINKED_ROOTS, []);\n    }\n    privateSet(this, UNRENDERED, nodes);\n    privateSet(this, UPDATED_BY, null);\n  }\n\n  /**\n   * Returns the root wrapper\n   *\n   * @return {ReactWrapper}\n   */\n  root() {\n    return this[ROOT];\n  }\n\n  /**\n   * Returns the wrapped component.\n   *\n   * @return {ReactComponent}\n   */\n  getNodeInternal() {\n    if (this.length !== 1) {\n      throw new Error('ReactWrapper::getNode() can only be called when wrapping one node');\n    }\n    return this[NODES][0];\n  }\n\n  /**\n   * Returns the the wrapped components.\n   *\n   * @return {Array<ReactComponent>}\n   */\n  getNodesInternal() {\n    return this[NODES];\n  }\n\n  /**\n   * Returns the wrapped ReactElement.\n   *\n   * @return {ReactElement}\n   */\n  getElement() {\n    return this.single('getElement', () => getAdapter(this[OPTIONS]).nodeToElement(this[NODE]));\n  }\n\n  /**\n   * Returns the wrapped ReactElements.\n   *\n   * @return {Array<ReactElement>}\n   */\n  getElements() {\n    return this[NODES].map((n) => getAdapter(this[OPTIONS]).nodeToElement(n));\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getNode() {\n    throw new Error('ReactWrapper::getNode() is no longer supported. Use ReactWrapper::instance() instead');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getNodes() {\n    throw new Error('ReactWrapper::getNodes() is no longer supported.');\n  }\n\n  /**\n   * Returns the outer most DOMComponent of the current wrapper.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @returns {DOMComponent}\n   */\n  getDOMNode() {\n    const adapter = getAdapter(this[OPTIONS]);\n    return this.single('getDOMNode', (n) => adapter.nodeToHostNode(n, true));\n  }\n\n  /**\n   * If the root component contained a ref, you can access it here and get the relevant\n   * react component instance or HTML element instance.\n   *\n   * NOTE: can only be called on a wrapper instance that is also the root instance.\n   *\n   * @param {String} refname\n   * @returns {ReactComponent | HTMLElement}\n   */\n  ref(refname) {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::ref(refname) can only be called on the root');\n    }\n    return this.instance().refs[refname];\n  }\n\n  /**\n   * Returns the wrapper's underlying instance.\n   *\n   * Example:\n   * ```\n   * const wrapper = mount(<MyComponent />);\n   * const inst = wrapper.instance();\n   * expect(inst).to.be.instanceOf(MyComponent);\n   * ```\n   * @returns {ReactComponent|DOMComponent}\n   */\n  instance() {\n    return this.single('instance', () => this[NODE].instance);\n  }\n\n  /**\n   * If a `wrappingComponent` was passed in `options`, this methods returns a `ReactWrapper` around\n   * the rendered `wrappingComponent`. This `ReactWrapper` can be used to update the\n   * `wrappingComponent`'s props, state, etc.\n   *\n   * @returns ReactWrapper\n   */\n  getWrappingComponent() {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::getWrappingComponent() can only be called on the root');\n    }\n    if (!this[OPTIONS].wrappingComponent) {\n      throw new Error('ReactWrapper::getWrappingComponent() can only be called on a wrapper that was originally passed a `wrappingComponent` option');\n    }\n    return this[WRAPPING_COMPONENT];\n  }\n\n  /**\n   * Forces a re-render. Useful to run before checking the render output if something external\n   * may be updating the state of the component somewhere.\n   *\n   * NOTE: no matter what instance this is called on, it will always update the root.\n   *\n   * @returns {ReactWrapper}\n   */\n  update() {\n    const root = this[ROOT];\n    if (this !== root) {\n      return root.update();\n    }\n    privateSetNodes(this, this[RENDERER].getNode());\n    this[LINKED_ROOTS].forEach((linkedRoot) => {\n      if (linkedRoot !== this[UPDATED_BY]) {\n        /* eslint-disable no-param-reassign */\n        // Only update a linked it root if it is not the originator of our update().\n        // This is needed to prevent infinite recursion when there is a bi-directional\n        // link between two roots.\n        linkedRoot[UPDATED_BY] = this;\n        try {\n          linkedRoot.update();\n        } finally {\n          linkedRoot[UPDATED_BY] = null;\n        }\n      }\n    });\n    return this;\n  }\n\n  /**\n   * A method that unmounts the component. This can be used to simulate a component going through\n   * and unmount/mount lifecycle.\n   *\n   * @returns {ReactWrapper}\n   */\n  unmount() {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::unmount() can only be called on the root');\n    }\n    this.single('unmount', () => {\n      this[RENDERER].unmount();\n      this.update();\n    });\n    return this;\n  }\n\n  /**\n   * A method that re-mounts the component, if it is not currently mounted.\n   * This can be used to simulate a component going through\n   * an unmount/mount lifecycle.\n   *\n   * @returns {ReactWrapper}\n   */\n  mount() {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::mount() can only be called on the root');\n    }\n    this[RENDERER].render(this[UNRENDERED], this[OPTIONS].context, () => this.update());\n    return this;\n  }\n\n  /**\n   * A method that sets the props of the root component, and re-renders. Useful for when you are\n   * wanting to test how the component behaves over time with changing props. Calling this, for\n   * instance, will call the `componentWillReceiveProps` lifecycle method.\n   *\n   * Similar to `setState`, this method accepts a props object and will merge it in with the already\n   * existing props.\n   *\n   * NOTE: can only be called on a wrapper instance that is also the root instance.\n   *\n   * @param {Object} props object\n   * @param {Function} cb - callback function\n   * @returns {ReactWrapper}\n   */\n  setProps(props, callback = undefined) {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::setProps() can only be called on the root');\n    }\n    if (arguments.length > 1 && typeof callback !== 'function') {\n      throw new TypeError('ReactWrapper::setProps() expects a function as its second argument');\n    }\n    const adapter = getAdapter(this[OPTIONS]);\n    this[UNRENDERED] = cloneElement(adapter, this[UNRENDERED], props);\n    this[RENDERER].render(this[UNRENDERED], null, () => {\n      this.update();\n      if (callback) {\n        callback();\n      }\n    });\n    return this;\n  }\n\n  /**\n   * A method to invoke `setState` on the root component instance similar to how you might in the\n   * definition of the component, and re-renders.  This method is useful for testing your component\n   * in hard to achieve states, however should be used sparingly. If possible, you should utilize\n   * your component's external API in order to get it into whatever state you want to test, in order\n   * to be as accurate of a test as possible. This is not always practical, however.\n   *\n   * NOTE: can only be called on a wrapper instance that is also the root instance.\n   *\n   * @param {Object} state to merge\n   * @param {Function} cb - callback function\n   * @returns {ReactWrapper}\n   */\n  setState(state, callback = undefined) {\n    if (this.instance() === null || this.getNodeInternal().nodeType !== 'class') {\n      throw new Error('ReactWrapper::setState() can only be called on class components');\n    }\n    if (arguments.length > 1 && typeof callback !== 'function') {\n      throw new TypeError('ReactWrapper::setState() expects a function as its second argument');\n    }\n    this.instance().setState(state, () => {\n      this.update();\n      if (callback) {\n        const adapter = getAdapter(this[OPTIONS]);\n        const instance = this.instance();\n        if (adapter.invokeSetStateCallback) {\n          adapter.invokeSetStateCallback(instance, callback);\n        } else {\n          callback.call(instance);\n        }\n      }\n    });\n    return this;\n  }\n\n  /**\n   * A method that sets the context of the root component, and re-renders. Useful for when you are\n   * wanting to test how the component behaves over time with changing contexts.\n   *\n   * NOTE: can only be called on a wrapper instance that is also the root instance.\n   *\n   * @param {Object} context object\n   * @returns {ReactWrapper}\n   */\n  setContext(context) {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::setContext() can only be called on the root');\n    }\n    if (!this[OPTIONS].context) {\n      throw new Error('ReactWrapper::setContext() can only be called on a wrapper that was originally passed a context option');\n    }\n    this[RENDERER].render(this[UNRENDERED], context, () => this.update());\n    return this;\n  }\n\n  /**\n   * Whether or not a given react element exists in the mount render tree.\n   *\n   * Example:\n   * ```\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.contains(<div className=\"foo bar\" />)).to.equal(true);\n   * ```\n   *\n   * @param {ReactElement|Array<ReactElement>} nodeOrNodes\n   * @returns {Boolean}\n   */\n  contains(nodeOrNodes) {\n    const adapter = getAdapter(this[OPTIONS]);\n\n    const predicate = Array.isArray(nodeOrNodes)\n      ? (other) => containsChildrenSubArray(\n        nodeEqual,\n        other,\n        nodeOrNodes.map((node) => adapter.elementToNode(node)),\n      )\n      : (other) => nodeEqual(adapter.elementToNode(nodeOrNodes), other);\n\n    return findWhereUnwrapped(this, predicate).length > 0;\n  }\n\n  /**\n   * Whether or not a given react element exists in the current render tree.\n   * It will determine if one of the wrappers element \"looks like\" the expected\n   * element by checking if all props of the expected element are present\n   * on the wrappers element and equals to each other.\n   *\n   * Example:\n   * ```\n   * // MyComponent outputs <div><div class=\"foo\">Hello</div></div>\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.containsMatchingElement(<div>Hello</div>)).to.equal(true);\n   * ```\n   *\n   * @param {ReactElement} node\n   * @returns {Boolean}\n   */\n  containsMatchingElement(node) {\n    const rstNode = getAdapter(this[OPTIONS]).elementToNode(node);\n    const predicate = (other) => nodeMatches(rstNode, other, (a, b) => a <= b);\n    return findWhereUnwrapped(this, predicate).length > 0;\n  }\n\n  /**\n   * Whether or not all the given react elements exist in the current render tree.\n   * It will determine if one of the wrappers element \"looks like\" the expected\n   * element by checking if all props of the expected element are present\n   * on the wrappers element and equals to each other.\n   *\n   * Example:\n   * ```\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.containsAllMatchingElements([\n   *   <div>Hello</div>,\n   *   <div>Goodbye</div>,\n   * ])).to.equal(true);\n   * ```\n   *\n   * @param {Array<ReactElement>} nodes\n   * @returns {Boolean}\n   */\n  containsAllMatchingElements(nodes) {\n    if (!Array.isArray(nodes)) {\n      throw new TypeError('nodes should be an Array');\n    }\n\n    return nodes.every((node) => this.containsMatchingElement(node));\n  }\n\n  /**\n   * Whether or not one of the given react elements exists in the current render tree.\n   * It will determine if one of the wrappers element \"looks like\" the expected\n   * element by checking if all props of the expected element are present\n   * on the wrappers element and equals to each other.\n   *\n   * Example:\n   * ```\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.containsAnyMatchingElements([\n   *   <div>Hello</div>,\n   *   <div>Goodbye</div>,\n   * ])).to.equal(true);\n   * ```\n   *\n   * @param {Array<ReactElement>} nodes\n   * @returns {Boolean}\n   */\n  containsAnyMatchingElements(nodes) {\n    return Array.isArray(nodes) && nodes.some((node) => this.containsMatchingElement(node));\n  }\n\n  /**\n   * Whether or not a given react element exists in the render tree.\n   *\n   * Example:\n   * ```\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.contains(<div className=\"foo bar\" />)).to.equal(true);\n   * ```\n   *\n   * @param {ReactElement} node\n   * @returns {Boolean}\n   */\n  equals(node) {\n    return this.single('equals', () => nodeEqual(this.getNodeInternal(), node));\n  }\n\n  /**\n   * Whether or not a given react element matches the render tree.\n   * Match is based on the expected element and not on wrapper root node.\n   * It will determine if the wrapper root node \"looks like\" the expected\n   * element by checking if all props of the expected element are present\n   * on the wrapper root node and equals to each other.\n   *\n   * Example:\n   * ```\n   * // MyComponent outputs <div class=\"foo\">Hello</div>\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.matchesElement(<div>Hello</div>)).to.equal(true);\n   * ```\n   *\n   * @param {ReactElement} node\n   * @returns {Boolean}\n   */\n  matchesElement(node) {\n    return this.single('matchesElement', () => {\n      const adapter = getAdapter(this[OPTIONS]);\n      const rstNode = adapter.elementToNode(node);\n      return nodeMatches(rstNode, this.getNodeInternal(), (a, b) => a <= b);\n    });\n  }\n\n  /**\n   * Finds every node in the render tree of the current wrapper that matches the provided selector.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {ReactWrapper}\n   */\n  find(selector) {\n    return this.wrap(reduceTreesBySelector(selector, this.getNodesInternal()));\n  }\n\n  /**\n   * Returns whether or not current node matches a provided selector.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {boolean}\n   */\n  is(selector) {\n    const predicate = buildPredicate(selector);\n    return this.single('is', (n) => predicate(n));\n  }\n\n  /**\n   * Returns true if the component rendered nothing, i.e., null or false.\n   *\n   * @returns {boolean}\n   */\n  isEmptyRender() {\n    const nodes = this.getNodeInternal();\n\n    return renderedDive(nodes);\n  }\n\n  /**\n   * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n   * the provided predicate function.\n   *\n   * @param {Function} predicate\n   * @returns {ReactWrapper}\n   */\n  filterWhere(predicate) {\n    return filterWhereUnwrapped(this, (n) => predicate(this.wrap(n)));\n  }\n\n  /**\n   * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n   * the provided selector.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {ReactWrapper}\n   */\n  filter(selector) {\n    const predicate = buildPredicate(selector);\n    return filterWhereUnwrapped(this, predicate);\n  }\n\n  /**\n   * Returns a new wrapper instance with only the nodes of the current wrapper that did not match\n   * the provided selector. Essentially the inverse of `filter`.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {ReactWrapper}\n   */\n  not(selector) {\n    const predicate = buildPredicate(selector);\n    return filterWhereUnwrapped(this, (n) => !predicate(n));\n  }\n\n  /**\n   * Returns a string of the rendered text of the current render tree.  This function should be\n   * looked at with skepticism if being used to test what the actual HTML output of the component\n   * will be. If that is what you would like to test, use enzyme's `render` function instead.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @returns {String}\n   */\n  text() {\n    const adapter = getAdapter(this[OPTIONS]);\n    return this.single('text', (n) => getTextFromHostNodes(n, adapter));\n  }\n\n  /**\n   * Returns the HTML of the node.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @returns {String}\n   */\n  html() {\n    const adapter = getAdapter(this[OPTIONS]);\n    return this.single('html', (n) => getHTMLFromHostNodes(n, adapter));\n  }\n\n  /**\n   * Returns the current node rendered to HTML and wrapped in a CheerioWrapper.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @returns {CheerioWrapper}\n   */\n  render() {\n    const html = this.html();\n    return loadCheerioRoot(html);\n  }\n\n  /**\n   * Used to simulate events. Pass an eventname and (optionally) event arguments. This method of\n   * testing events should be met with some skepticism.\n   *\n   * @param {String} event\n   * @param {Object} mock (optional)\n   * @returns {ReactWrapper}\n   */\n  simulate(event, mock = {}) {\n    return this.single('simulate', (n) => {\n      this[RENDERER].simulateEvent(n, event, mock);\n      this[ROOT].update();\n      return this;\n    });\n  }\n\n  /**\n   * Used to simulate throwing a rendering error. Pass an error to throw.\n   *\n   * @param {String} error\n   * @returns {ReactWrapper}\n   */\n  simulateError(error) {\n    if (this[ROOT] === this) {\n      throw new Error('ReactWrapper::simulateError() may not be called on the root');\n    }\n\n    return this.single('simulateError', (thisNode) => {\n      if (thisNode.nodeType === 'host') {\n        throw new Error('ReactWrapper::simulateError() can only be called on custom components');\n      }\n\n      const renderer = this[RENDERER];\n      if (typeof renderer.simulateError !== 'function') {\n        throw new TypeError('your adapter does not support `simulateError`. Try upgrading it!');\n      }\n\n      const rootNode = getRootNodeInternal(this);\n      const nodeHierarchy = [thisNode].concat(nodeParents(this, thisNode));\n      renderer.simulateError(nodeHierarchy, rootNode, error);\n\n      this[ROOT].update();\n      return this;\n    });\n  }\n\n  /**\n   * Returns the props hash for the root node of the wrapper.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @returns {Object}\n   */\n  props() {\n    return this.single('props', propsOfNode);\n  }\n\n  /**\n   * Returns the state hash for the root node of the wrapper. Optionally pass in a prop name and it\n   * will return just that value.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @param {String} name (optional)\n   * @returns {*}\n   */\n  state(name) {\n    const thisNode = this[ROOT] === this ? this[RENDERER].getNode() : this.getNodeInternal();\n    if (this.instance() === null || thisNode.nodeType !== 'class') {\n      throw new Error('ReactWrapper::state() can only be called on class components');\n    }\n    const _state = this.single('state', () => this.instance().state);\n    if (typeof name !== 'undefined') {\n      if (_state == null) {\n        throw new TypeError(`ReactWrapper::state(\"${name}\") requires that \\`state\\` not be \\`null\\` or \\`undefined\\``);\n      }\n      return _state[name];\n    }\n    return _state;\n  }\n\n  /**\n   * Returns the context hash for the root node of the wrapper.\n   * Optionally pass in a prop name and it will return just that value.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @param {String} name (optional)\n   * @returns {*}\n   */\n  context(name) {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::context() can only be called on the root');\n    }\n    const instance = this.single('context', () => this.instance());\n    if (instance === null) {\n      throw new Error('ReactWrapper::context() can only be called on components with instances');\n    }\n    const _context = instance.context;\n    if (typeof name !== 'undefined') {\n      return _context[name];\n    }\n    return _context;\n  }\n\n  /**\n   * Returns a new wrapper with all of the children of the current wrapper.\n   *\n   * @param {EnzymeSelector} [selector]\n   * @returns {ReactWrapper}\n   */\n  children(selector) {\n    const allChildren = this.flatMap((n) => childrenOfNode(n.getNodeInternal()));\n    return selector ? allChildren.filter(selector) : allChildren;\n  }\n\n  /**\n   * Returns a new wrapper with a specific child\n   *\n   * @param {Number} [index]\n   * @returns {ReactWrapper}\n   */\n  childAt(index) {\n    return this.single('childAt', () => this.children().at(index));\n  }\n\n  /**\n   * Returns a wrapper around all of the parents/ancestors of the wrapper. Does not include the node\n   * in the current wrapper.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @param {EnzymeSelector} [selector]\n   * @returns {ReactWrapper}\n   */\n  parents(selector) {\n    return this.single('parents', (n) => {\n      const allParents = this.wrap(nodeParents(this, n));\n      return selector ? allParents.filter(selector) : allParents;\n    });\n  }\n\n  /**\n   * Returns a wrapper around the immediate parent of the current node.\n   *\n   * @returns {ReactWrapper}\n   */\n  parent() {\n    return this.flatMap((n) => [n.parents().get(0)]);\n  }\n\n  /**\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {ReactWrapper}\n   */\n  closest(selector) {\n    if (this.is(selector)) {\n      return this;\n    }\n    const matchingAncestors = this.parents().filter(selector);\n    return matchingAncestors.length > 0 ? matchingAncestors.first() : this.findWhere(() => false);\n  }\n\n  /**\n   * Returns the value of  prop with the given name of the root node.\n   *\n   * @param {String} propName\n   * @returns {*}\n   */\n  prop(propName) {\n    return this.props()[propName];\n  }\n\n  /**\n   * Used to invoke a function prop.\n   * Will invoke an function prop and return its value.\n   *\n   * @param {String} propName\n   * @returns {Any}\n   */\n  invoke(propName) {\n    return this.single('invoke', () => {\n      const handler = this.prop(propName);\n      if (typeof handler !== 'function') {\n        throw new TypeError('ReactWrapper::invoke() requires the name of a prop whose value is a function');\n      }\n      return (...args) => {\n        const response = typeof this[RENDERER].wrapInvoke === 'function'\n          ? this[RENDERER].wrapInvoke(() => handler(...args))\n          : handler(...args);\n        this[ROOT].update();\n        return response;\n      };\n    });\n  }\n\n  /**\n   * Returns a wrapper of the node rendered by the provided render prop.\n   *\n   * @param {String} propName\n   * @returns {Function}\n   */\n  renderProp(propName) {\n    const adapter = getAdapter(this[OPTIONS]);\n    if (typeof adapter.wrap !== 'function') {\n      throw new RangeError('your adapter does not support `wrap`. Try upgrading it!');\n    }\n\n    return this.single('renderProp', (n) => {\n      if (n.nodeType === 'host') {\n        throw new TypeError('ReactWrapper::renderProp() can only be called on custom components');\n      }\n      if (typeof propName !== 'string') {\n        throw new TypeError('ReactWrapper::renderProp(): `propName` must be a string');\n      }\n      const props = this.props();\n      if (!has(props, propName)) {\n        throw new Error(`ReactWrapper::renderProp(): no prop called “${propName}“ found`);\n      }\n      const propValue = props[propName];\n      if (typeof propValue !== 'function') {\n        throw new TypeError(`ReactWrapper::renderProp(): expected prop “${propName}“ to contain a function, but it holds “${typeof propValue}“`);\n      }\n\n      return (...args) => {\n        const element = propValue(...args);\n        const wrapped = adapter.wrap(element);\n        return this.wrap(wrapped, null, this[OPTIONS]);\n      };\n    });\n  }\n\n  /**\n   * Returns the key assigned to the current node.\n   *\n   * @returns {String}\n   */\n  key() {\n    return this.single('key', (n) => (n.key === undefined ? null : n.key));\n  }\n\n  /**\n   * Returns the type of the root node of this wrapper. If it's a composite component, this will be\n   * the component constructor. If it's native DOM node, it will be a string.\n   *\n   * @returns {String|Function}\n   */\n  type() {\n    return this.single('type', (n) => typeOfNode(n));\n  }\n\n  /**\n   * Returns the name of the root node of this wrapper.\n   *\n   * In order of precedence => type.displayName -> type.name -> type.\n   *\n   * @returns {String}\n   */\n  name() {\n    const adapter = getAdapter(this[OPTIONS]);\n    return this.single('name', (n) => (\n      adapter.displayNameOfNode ? adapter.displayNameOfNode(n) : displayNameOfNode(n)\n    ));\n  }\n\n  /**\n   * Returns whether or not the current root node has the given class name or not.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @param {String} className\n   * @returns {Boolean}\n   */\n  hasClass(className) {\n    if (typeof className === 'string' && className.indexOf('.') !== -1) {\n      // eslint-disable-next-line no-console\n      console.warn('It looks like you\\'re calling `ReactWrapper::hasClass()` with a CSS selector. hasClass() expects a class name, not a CSS selector.');\n    }\n    return this.single('hasClass', (n) => hasClassName(n, className));\n  }\n\n  /**\n   * Iterates through each node of the current wrapper and executes the provided function with a\n   * wrapper around the corresponding node passed in as the first argument.\n   *\n   * @param {Function} fn\n   * @returns {ReactWrapper}\n   */\n  forEach(fn) {\n    this.getNodesInternal().forEach((n, i) => fn.call(this, this.wrap(n), i));\n    return this;\n  }\n\n  /**\n   * Maps the current array of nodes to another array. Each node is passed in as a `ReactWrapper`\n   * to the map function.\n   *\n   * @param {Function} fn\n   * @returns {Array}\n   */\n  map(fn) {\n    return this.getNodesInternal().map((n, i) => fn.call(this, this.wrap(n), i));\n  }\n\n  /**\n   * Reduces the current array of nodes to another array.\n   * Each node is passed in as a `ShallowWrapper` to the reducer function.\n   *\n   * @param {Function} fn - the reducer function\n   * @param {*} initialValue - the initial value\n   * @returns {*}\n   */\n  reduce(fn, initialValue = undefined) {\n    if (arguments.length > 1) {\n      return this.getNodesInternal().reduce(\n        (accum, n, i) => fn.call(this, accum, this.wrap(n), i),\n        initialValue,\n      );\n    }\n    return this.getNodesInternal().reduce((accum, n, i) => fn.call(\n      this,\n      i === 1 ? this.wrap(accum) : accum,\n      this.wrap(n),\n      i,\n    ));\n  }\n\n  /**\n   * Reduces the current array of nodes to another array, from right to left. Each node is passed\n   * in as a `ShallowWrapper` to the reducer function.\n   *\n   * @param {Function} fn - the reducer function\n   * @param {*} initialValue - the initial value\n   * @returns {*}\n   */\n  reduceRight(fn, initialValue = undefined) {\n    if (arguments.length > 1) {\n      return this.getNodesInternal().reduceRight(\n        (accum, n, i) => fn.call(this, accum, this.wrap(n), i),\n        initialValue,\n      );\n    }\n    return this.getNodesInternal().reduceRight((accum, n, i) => fn.call(\n      this,\n      i === 1 ? this.wrap(accum) : accum,\n      this.wrap(n),\n      i,\n    ));\n  }\n\n  /**\n   * Returns a new wrapper with a subset of the nodes of the original wrapper, according to the\n   * rules of `Array#slice`.\n   *\n   * @param {Number} begin\n   * @param {Number} end\n   * @returns {ShallowWrapper}\n   */\n  slice(begin, end) {\n    return this.wrap(this.getNodesInternal().slice(begin, end));\n  }\n\n  /**\n   * Returns whether or not any of the nodes in the wrapper match the provided selector.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {Boolean}\n   */\n  some(selector) {\n    if (this[ROOT] === this) {\n      throw new Error('ReactWrapper::some() can not be called on the root');\n    }\n    const predicate = buildPredicate(selector);\n    return this.getNodesInternal().some(predicate);\n  }\n\n  /**\n   * Returns whether or not any of the nodes in the wrapper pass the provided predicate function.\n   *\n   * @param {Function} predicate\n   * @returns {Boolean}\n   */\n  someWhere(predicate) {\n    return this.getNodesInternal().some((n, i) => predicate.call(this, this.wrap(n), i));\n  }\n\n  /**\n   * Returns whether or not all of the nodes in the wrapper match the provided selector.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {Boolean}\n   */\n  every(selector) {\n    const predicate = buildPredicate(selector);\n    return this.getNodesInternal().every(predicate);\n  }\n\n  /**\n   * Returns whether or not any of the nodes in the wrapper pass the provided predicate function.\n   *\n   * @param {Function} predicate\n   * @returns {Boolean}\n   */\n  everyWhere(predicate) {\n    return this.getNodesInternal().every((n, i) => predicate.call(this, this.wrap(n), i));\n  }\n\n  /**\n   * Utility method used to create new wrappers with a mapping function that returns an array of\n   * nodes in response to a single node wrapper. The returned wrapper is a single wrapper around\n   * all of the mapped nodes flattened (and de-duplicated).\n   *\n   * @param {Function} fn\n   * @returns {ReactWrapper}\n   */\n  flatMap(fn) {\n    const nodes = this.getNodesInternal().map((n, i) => fn.call(this, this.wrap(n), i));\n    const flattened = flat(nodes, 1);\n    return this.wrap(flattened.filter(Boolean));\n  }\n\n  /**\n   * Finds all nodes in the current wrapper nodes' render trees that match the provided predicate\n   * function.\n   *\n   * @param {Function} predicate\n   * @returns {ReactWrapper}\n   */\n  findWhere(predicate) {\n    return findWhereUnwrapped(this, (n) => {\n      const node = this.wrap(n);\n      return node.length > 0 && predicate(node);\n    });\n  }\n\n  /**\n   * Returns the node at a given index of the current wrapper.\n   *\n   * @param {Number} index\n   * @returns {ReactElement}\n   */\n  get(index) {\n    return this.getElements()[index];\n  }\n\n  /**\n   * Returns a wrapper around the node at a given index of the current wrapper.\n   *\n   * @param {Number} index\n   * @returns {ReactWrapper}\n   */\n  at(index) {\n    const nodes = this.getNodesInternal();\n    if (index < nodes.length) {\n      return this.wrap(nodes[index]);\n    }\n    return this.wrap([]);\n  }\n\n  /**\n   * Returns a wrapper around the first node of the current wrapper.\n   *\n   * @returns {ReactWrapper}\n   */\n  first() {\n    return this.at(0);\n  }\n\n  /**\n   * Returns a wrapper around the last node of the current wrapper.\n   *\n   * @returns {ReactWrapper}\n   */\n  last() {\n    return this.at(this.length - 1);\n  }\n\n  /**\n   * Delegates to exists()\n   *\n   * @returns {boolean}\n   */\n  isEmpty() {\n    // eslint-disable-next-line no-console\n    console.warn('Enzyme::Deprecated method isEmpty() called, use exists() instead.');\n    return !this.exists();\n  }\n\n  /**\n   * Returns true if the current wrapper has nodes. False otherwise.\n   * If called with a selector it returns `.find(selector).exists()` instead.\n   *\n   * @param {EnzymeSelector} selector (optional)\n   * @returns {boolean}\n   */\n  exists(selector = null) {\n    return arguments.length > 0 ? this.find(selector).exists() : this.length > 0;\n  }\n\n  /**\n   * Utility method that throws an error if the current instance has a length other than one.\n   * This is primarily used to enforce that certain methods are only run on a wrapper when it is\n   * wrapping a single node.\n   *\n   * @param {Function} fn\n   * @returns {*}\n   */\n  single(name, fn) {\n    const fnName = typeof name === 'string' ? name : 'unknown';\n    const callback = typeof fn === 'function' ? fn : name;\n    if (this.length !== 1) {\n      throw new Error(`Method “${fnName}” is meant to be run on 1 node. ${this.length} found instead.`);\n    }\n    return callback.call(this, this.getNodeInternal());\n  }\n\n  /**\n   * Helpful utility method to create a new wrapper with the same root as the current wrapper, with\n   * any nodes passed in as the first parameter automatically wrapped.\n   *\n   * @param {ReactWrapper|ReactElement|Array<ReactElement>} node\n   * @returns {ReactWrapper}\n   */\n  wrap(node, root = this[ROOT], ...args) {\n    if (node instanceof ReactWrapper) {\n      return node;\n    }\n    return new ReactWrapper(node, root, ...args);\n  }\n\n  /**\n   * Returns an HTML-like string of the shallow render for debugging purposes.\n   *\n   * @param {Object} [options] - Property bag of additional options.\n   * @param {boolean} [options.ignoreProps] - if true, props are omitted from the string.\n   * @param {boolean} [options.verbose] - if true, arrays and objects to be verbosely printed.\n   * @returns {String}\n   */\n  debug(options = {}) {\n    return debugNodes(this.getNodesInternal(), options);\n  }\n\n  /**\n   * Invokes intercepter and returns itself. intercepter is called with itself.\n   * This is helpful when debugging nodes in method chains.\n   * @param fn\n   * @returns {ReactWrapper}\n   */\n  tap(intercepter) {\n    intercepter(this);\n    return this;\n  }\n\n  /**\n   * Detaches the react tree from the DOM. Runs `ReactDOM.unmountComponentAtNode()` under the hood.\n   *\n   * This method will most commonly be used as a \"cleanup\" method if you decide to use the\n   * `attachTo` option in `mount(node, options)`.\n   *\n   * The method is intentionally not \"fluent\" (in that it doesn't return `this`) because you should\n   * not be doing anything with this wrapper after this method is called.\n   */\n  detach() {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::detach() can only be called on the root');\n    }\n    if (!this[OPTIONS].attachTo) {\n      throw new Error('ReactWrapper::detach() can only be called on when the `attachTo` option was passed into `mount()`.');\n    }\n    this[RENDERER].unmount();\n  }\n\n  /**\n   * Strips out all the not host-nodes from the list of nodes\n   *\n   * This method is useful if you want to check for the presence of host nodes\n   * (actually rendered HTML elements) ignoring the React nodes.\n   */\n  hostNodes() {\n    return this.filterWhere((n) => typeof n.type() === 'string');\n  }\n}\n\n/**\n * A *special* \"root\" wrapper that represents the component passed as `wrappingComponent`.\n * It is linked to the primary root such that updates to it will update the primary,\n * and vice versa.\n *\n * @class WrappingComponentWrapper\n */\nclass WrappingComponentWrapper extends ReactWrapper {\n  /* eslint-disable class-methods-use-this */\n  constructor(root, renderer) {\n    super(renderer.getNode(), root);\n\n    privateSet(this, ROOT, this);\n    privateSet(this, RENDERER, renderer);\n    this[LINKED_ROOTS].push(root);\n  }\n\n  getWrappingComponent() {\n    throw new TypeError('ReactWrapper::getWrappingComponent() can only be called on the root');\n  }\n}\n\nif (ITERATOR_SYMBOL) {\n  Object.defineProperty(ReactWrapper.prototype, ITERATOR_SYMBOL, {\n    configurable: true,\n    value: function iterator() {\n      const iter = this[NODES][ITERATOR_SYMBOL]();\n      const adapter = getAdapter(this[OPTIONS]);\n      return {\n        [ITERATOR_SYMBOL]() { return this; },\n        next() {\n          const next = iter.next();\n          if (next.done) {\n            return { done: true };\n          }\n          return {\n            done: false,\n            value: adapter.nodeToElement(next.value),\n          };\n        },\n      };\n    },\n  });\n}\n\nfunction privateWarning(prop, extraMessage) {\n  Object.defineProperty(ReactWrapper.prototype, prop, {\n    get() {\n      throw new Error(`\n        Attempted to access ReactWrapper::${prop}, which was previously a private property on\n        Enzyme ReactWrapper instances, but is no longer and should not be relied upon.\n        ${extraMessage}\n      `);\n    },\n    enumerable: false,\n    configurable: false,\n  });\n}\n\nprivateWarning('node', 'Consider using the getElement() method instead.');\nprivateWarning('nodes', 'Consider using the getElements() method instead.');\nprivateWarning('renderer', '');\nprivateWarning('options', '');\nprivateWarning('complexSelector', '');\n\nexport default ReactWrapper;\n"]},"metadata":{},"sourceType":"script"}