{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clone = exports.text = exports.toString = exports.html = exports.empty = exports.replaceWith = exports.remove = exports.insertBefore = exports.before = exports.insertAfter = exports.after = exports.wrapAll = exports.unwrap = exports.wrapInner = exports.wrap = exports.prepend = exports.append = exports.prependTo = exports.appendTo = exports._makeDomArray = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Methods for modifying the DOM structure.\n *\n * @module cheerio/manipulation\n */\n\n\nvar domhandler_2 = require(\"domhandler\");\n\nvar parse_1 = tslib_1.__importStar(require(\"../parse\"));\n\nvar static_1 = require(\"../static\");\n\nvar utils_1 = require(\"../utils\");\n\nvar htmlparser2_1 = require(\"htmlparser2\");\n/**\n * Create an array of nodes, recursing into arrays and parsing strings if necessary.\n *\n * @private\n * @category Manipulation\n * @param elem - Elements to make an array of.\n * @param clone - Optionally clone nodes.\n * @returns The array of nodes.\n */\n\n\nfunction _makeDomArray(elem, clone) {\n  var _this = this;\n\n  if (elem == null) {\n    return [];\n  }\n\n  if (utils_1.isCheerio(elem)) {\n    return clone ? utils_1.cloneDom(elem.get()) : elem.get();\n  }\n\n  if (Array.isArray(elem)) {\n    return elem.reduce(function (newElems, el) {\n      return newElems.concat(_this._makeDomArray(el, clone));\n    }, []);\n  }\n\n  if (typeof elem === 'string') {\n    return parse_1.default(elem, this.options, false).children;\n  }\n\n  return clone ? utils_1.cloneDom([elem]) : [elem];\n}\n\nexports._makeDomArray = _makeDomArray;\n\nfunction _insert(concatenator) {\n  return function () {\n    var _this = this;\n\n    var elems = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      elems[_i] = arguments[_i];\n    }\n\n    var lastIdx = this.length - 1;\n    return utils_1.domEach(this, function (el, i) {\n      if (!domhandler_1.hasChildren(el)) return;\n      var domSrc = typeof elems[0] === 'function' ? elems[0].call(el, i, static_1.html(el.children)) : elems;\n\n      var dom = _this._makeDomArray(domSrc, i < lastIdx);\n\n      concatenator(dom, el.children, el);\n    });\n  };\n}\n/**\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @private\n * @category Manipulation\n * @param array - Target array to splice.\n * @param spliceIdx - Index at which to begin changing the array.\n * @param spliceCount - Number of elements to remove from the array.\n * @param newElems - Elements to insert into the array.\n * @param parent - The parent of the node.\n * @returns The spliced array.\n */\n\n\nfunction uniqueSplice(array, spliceIdx, spliceCount, newElems, parent) {\n  var _a, _b;\n\n  var spliceArgs = tslib_1.__spreadArray([spliceIdx, spliceCount], newElems);\n\n  var prev = array[spliceIdx - 1] || null;\n  var next = array[spliceIdx + spliceCount] || null;\n  /*\n   * Before splicing in new elements, ensure they do not already appear in the\n   * current array.\n   */\n\n  for (var idx = 0; idx < newElems.length; ++idx) {\n    var node = newElems[idx];\n    var oldParent = node.parent;\n\n    if (oldParent) {\n      var prevIdx = oldParent.children.indexOf(newElems[idx]);\n\n      if (prevIdx > -1) {\n        oldParent.children.splice(prevIdx, 1);\n\n        if (parent === oldParent && spliceIdx > prevIdx) {\n          spliceArgs[0]--;\n        }\n      }\n    }\n\n    node.parent = parent;\n\n    if (node.prev) {\n      node.prev.next = (_a = node.next) !== null && _a !== void 0 ? _a : null;\n    }\n\n    if (node.next) {\n      node.next.prev = (_b = node.prev) !== null && _b !== void 0 ? _b : null;\n    }\n\n    node.prev = newElems[idx - 1] || prev;\n    node.next = newElems[idx + 1] || next;\n  }\n\n  if (prev) {\n    prev.next = newElems[0];\n  }\n\n  if (next) {\n    next.prev = newElems[newElems.length - 1];\n  }\n\n  return array.splice.apply(array, spliceArgs);\n}\n/**\n * Insert every element in the set of matched elements to the end of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').appendTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to append elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/appendTo/}\n */\n\n\nfunction appendTo(target) {\n  var appendTarget = utils_1.isCheerio(target) ? target : this._make(target);\n  appendTarget.append(this);\n  return this;\n}\n\nexports.appendTo = appendTo;\n/**\n * Insert every element in the set of matched elements to the beginning of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').prependTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to prepend elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/prependTo/}\n */\n\nfunction prependTo(target) {\n  var prependTarget = utils_1.isCheerio(target) ? target : this._make(target);\n  prependTarget.prepend(this);\n  return this;\n}\n\nexports.prependTo = prependTo;\n/**\n * Inserts content as the *last* child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').append('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/append/}\n */\n\nexports.append = _insert(function (dom, children, parent) {\n  uniqueSplice(children, children.length, 0, dom, parent);\n});\n/**\n * Inserts content as the *first* child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').prepend('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/prepend/}\n */\n\nexports.prepend = _insert(function (dom, children, parent) {\n  uniqueSplice(children, 0, 0, dom, parent);\n});\n\nfunction _wrap(insert) {\n  return function (wrapper) {\n    var lastIdx = this.length - 1;\n    var lastParent = this.parents().last();\n\n    for (var i = 0; i < this.length; i++) {\n      var el = this[i];\n      var wrap_1 = typeof wrapper === 'function' ? wrapper.call(el, i, el) : typeof wrapper === 'string' && !utils_1.isHtml(wrapper) ? lastParent.find(wrapper).clone() : wrapper;\n\n      var wrapperDom = this._makeDomArray(wrap_1, i < lastIdx)[0];\n\n      if (!wrapperDom || !htmlparser2_1.DomUtils.hasChildren(wrapperDom)) continue;\n      var elInsertLocation = wrapperDom;\n      /*\n       * Find the deepest child. Only consider the first tag child of each node\n       * (ignore text); stop if no children are found.\n       */\n\n      var j = 0;\n\n      while (j < elInsertLocation.children.length) {\n        var child = elInsertLocation.children[j];\n\n        if (utils_1.isTag(child)) {\n          elInsertLocation = child;\n          j = 0;\n        } else {\n          j++;\n        }\n      }\n\n      insert(el, elInsertLocation, [wrapperDom]);\n    }\n\n    return this;\n  };\n}\n/**\n * The .wrap() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. A\n * copy of this structure will be wrapped around each of the elements in the set\n * of matched elements. This method returns the original set of elements for\n * chaining purposes.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrap(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"red-fruit\">\n * //      <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrap(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"healthy\">\n * //       <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //       <li class=\"orange\">Orange</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //        <li class=\"plum\">Plum</li>\n * //     </div>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around each element in the selection.\n * @see {@link https://api.jquery.com/wrap/}\n */\n\n\nexports.wrap = _wrap(function (el, elInsertLocation, wrapperDom) {\n  var parent = el.parent;\n  if (!parent) return;\n  var siblings = parent.children;\n  var index = siblings.indexOf(el);\n  parse_1.update([el], elInsertLocation);\n  /*\n   * The previous operation removed the current element from the `siblings`\n   * array, so the `dom` array can be inserted without removing any\n   * additional elements.\n   */\n\n  uniqueSplice(siblings, index, 0, wrapperDom, parent);\n});\n/**\n * The .wrapInner() function can take any string or object that could be passed\n * to the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around the content of each of the elements in the\n * set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrapInner(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"red-fruit\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"pear\">Pear</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrapInner(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"healthy\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">\n * //       <div class=\"healthy\">Orange</div>\n * //     </li>\n * //     <li class=\"pear\">\n * //       <div class=\"healthy\">Pear</div>\n * //     </li>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around the content of each element\n *   in the selection.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/wrapInner/}\n */\n\nexports.wrapInner = _wrap(function (el, elInsertLocation, wrapperDom) {\n  if (!domhandler_1.hasChildren(el)) return;\n  parse_1.update(el.children, elInsertLocation);\n  parse_1.update(wrapperDom, el);\n});\n/**\n * The .unwrap() function, removes the parents of the set of matched elements\n * from the DOM, leaving the matched elements in their place.\n *\n * @category Manipulation\n * @example <caption>without selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <div><p>Hello</p></div>\\n  <div><p>World</p></div>\\n</div>'\n * );\n * $('#test p').unwrap();\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @example <caption>with selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <p>Hello</p>\\n  <b><p>World</p></b>\\n</div>'\n * );\n * $('#test p').unwrap('b');\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @param selector - A selector to check the parent element against. If an\n *   element's parent does not match the selector, the element won't be unwrapped.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/unwrap/}\n */\n\nfunction unwrap(selector) {\n  var _this = this;\n\n  this.parent(selector).not('body').each(function (_, el) {\n    _this._make(el).replaceWith(el.children);\n  });\n  return this;\n}\n\nexports.unwrap = unwrap;\n/**\n * The .wrapAll() function can take any string or object that could be passed to\n * the $() function to specify a DOM structure. This structure may be nested\n * several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around all of the elements in the set of matched\n * elements, as a single group.\n *\n * @category Manipulation\n * @example <caption>With markup passed to `wrapAll`</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div class=\"container\"><div class=\"inner\">First</div><div class=\"inner\">Second</div></div>'\n * );\n * $('.inner').wrapAll(\"<div class='new'></div>\");\n *\n * //=> <div class=\"container\">\n * //     <div class='new'>\n * //       <div class=\"inner\">First</div>\n * //       <div class=\"inner\">Second</div>\n * //     </div>\n * //   </div>\n * ```\n *\n * @example <caption>With an existing cheerio instance</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<span>Span 1</span><strong>Strong</strong><span>Span 2</span>'\n * );\n * const wrap = $('<div><p><em><b></b></em></p></div>');\n * $('span').wrapAll(wrap);\n *\n * //=> <div>\n * //     <p>\n * //       <em>\n * //         <b>\n * //           <span>Span 1</span>\n * //           <span>Span 2</span>\n * //         </b>\n * //       </em>\n * //     </p>\n * //   </div>\n * //   <strong>Strong</strong>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around all matched elements in the\n *   selection.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/wrapAll/}\n */\n\nfunction wrapAll(wrapper) {\n  var el = this[0];\n\n  if (el) {\n    var wrap_2 = this._make(typeof wrapper === 'function' ? wrapper.call(el, 0, el) : wrapper).insertBefore(el); // If html is given as wrapper, wrap may contain text elements\n\n\n    var elInsertLocation = void 0;\n\n    for (var i = 0; i < wrap_2.length; i++) {\n      if (wrap_2[i].type === 'tag') elInsertLocation = wrap_2[i];\n    }\n\n    var j = 0;\n    /*\n     * Find the deepest child. Only consider the first tag child of each node\n     * (ignore text); stop if no children are found.\n     */\n\n    while (elInsertLocation && j < elInsertLocation.children.length) {\n      var child = elInsertLocation.children[j];\n\n      if (child.type === 'tag') {\n        elInsertLocation = child;\n        j = 0;\n      } else {\n        j++;\n      }\n    }\n\n    if (elInsertLocation) this._make(elInsertLocation).append(this);\n  }\n\n  return this;\n}\n\nexports.wrapAll = wrapAll;\n/* eslint-disable jsdoc/check-param-names*/\n\n/**\n * Insert content next to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').after('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert after each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/after/}\n */\n\nfunction after() {\n  var _this = this;\n\n  var elems = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    elems[_i] = arguments[_i];\n  }\n\n  var lastIdx = this.length - 1;\n  return utils_1.domEach(this, function (el, i) {\n    var parent = el.parent;\n\n    if (!htmlparser2_1.DomUtils.hasChildren(el) || !parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el); // If not found, move on\n\n    /* istanbul ignore next */\n\n    if (index < 0) return;\n    var domSrc = typeof elems[0] === 'function' ? elems[0].call(el, i, static_1.html(el.children)) : elems;\n\n    var dom = _this._makeDomArray(domSrc, i < lastIdx); // Add element after `this` element\n\n\n    uniqueSplice(siblings, index + 1, 0, dom, parent);\n  });\n}\n\nexports.after = after;\n/* eslint-enable jsdoc/check-param-names*/\n\n/**\n * Insert every element in the set of matched elements after the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertAfter('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements after.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertAfter/}\n */\n\nfunction insertAfter(target) {\n  var _this = this;\n\n  if (typeof target === 'string') {\n    target = this._make(target);\n  }\n\n  this.remove();\n  var clones = [];\n\n  this._makeDomArray(target).forEach(function (el) {\n    var clonedSelf = _this.clone().toArray();\n\n    var parent = el.parent;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el); // If not found, move on\n\n    /* istanbul ignore next */\n\n    if (index < 0) return; // Add cloned `this` element(s) after target element\n\n    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n    clones.push.apply(clones, clonedSelf);\n  });\n\n  return this._make(clones);\n}\n\nexports.insertAfter = insertAfter;\n/* eslint-disable jsdoc/check-param-names*/\n\n/**\n * Insert content previous to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').before('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert before each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/before/}\n */\n\nfunction before() {\n  var _this = this;\n\n  var elems = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    elems[_i] = arguments[_i];\n  }\n\n  var lastIdx = this.length - 1;\n  return utils_1.domEach(this, function (el, i) {\n    var parent = el.parent;\n\n    if (!htmlparser2_1.DomUtils.hasChildren(el) || !parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el); // If not found, move on\n\n    /* istanbul ignore next */\n\n    if (index < 0) return;\n    var domSrc = typeof elems[0] === 'function' ? elems[0].call(el, i, static_1.html(el.children)) : elems;\n\n    var dom = _this._makeDomArray(domSrc, i < lastIdx); // Add element before `el` element\n\n\n    uniqueSplice(siblings, index, 0, dom, parent);\n  });\n}\n\nexports.before = before;\n/* eslint-enable jsdoc/check-param-names*/\n\n/**\n * Insert every element in the set of matched elements before the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertBefore('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements before.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertBefore/}\n */\n\nfunction insertBefore(target) {\n  var _this = this;\n\n  var targetArr = this._make(target);\n\n  this.remove();\n  var clones = [];\n  utils_1.domEach(targetArr, function (el) {\n    var clonedSelf = _this.clone().toArray();\n\n    var parent = el.parent;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el); // If not found, move on\n\n    /* istanbul ignore next */\n\n    if (index < 0) return; // Add cloned `this` element(s) after target element\n\n    uniqueSplice(siblings, index, 0, clonedSelf, parent);\n    clones.push.apply(clones, clonedSelf);\n  });\n  return this._make(clones);\n}\n\nexports.insertBefore = insertBefore;\n/**\n * Removes the set of matched elements from the DOM and all their children.\n * `selector` filters the set of matched elements to be removed.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.pear').remove();\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //    </ul>\n * ```\n *\n * @param selector - Optional selector for elements to remove.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/remove/}\n */\n\nfunction remove(selector) {\n  // Filter if we have selector\n  var elems = selector ? this.filter(selector) : this;\n  utils_1.domEach(elems, function (el) {\n    htmlparser2_1.DomUtils.removeElement(el);\n    el.prev = el.next = el.parent = null;\n  });\n  return this;\n}\n\nexports.remove = remove;\n/**\n * Replaces matched elements with `content`.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const plum = $('<li class=\"plum\">Plum</li>');\n * $('.pear').replaceWith(plum);\n * $.html();\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">Apple</li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n * ```\n *\n * @param content - Replacement for matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/replaceWith/}\n */\n\nfunction replaceWith(content) {\n  var _this = this;\n\n  return utils_1.domEach(this, function (el, i) {\n    var parent = el.parent;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var cont = typeof content === 'function' ? content.call(el, i, el) : content;\n\n    var dom = _this._makeDomArray(cont);\n    /*\n     * In the case that `dom` contains nodes that already exist in other\n     * structures, ensure those nodes are properly removed.\n     */\n\n\n    parse_1.update(dom, null);\n    var index = siblings.indexOf(el); // Completely remove old element\n\n    uniqueSplice(siblings, index, 1, dom, parent);\n\n    if (!dom.includes(el)) {\n      el.parent = el.prev = el.next = null;\n    }\n  });\n}\n\nexports.replaceWith = replaceWith;\n/**\n * Empties an element, removing all its children.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').empty();\n * $.html();\n * //=>  <ul id=\"fruits\"></ul>\n * ```\n *\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/empty/}\n */\n\nfunction empty() {\n  return utils_1.domEach(this, function (el) {\n    if (!htmlparser2_1.DomUtils.hasChildren(el)) return;\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n    el.children.length = 0;\n  });\n}\n\nexports.empty = empty;\n\nfunction html(str) {\n  if (str === undefined) {\n    var el = this[0];\n    if (!el || !htmlparser2_1.DomUtils.hasChildren(el)) return null;\n    return static_1.html(el.children, this.options);\n  } // Keep main options unchanged\n\n\n  var opts = tslib_1.__assign(tslib_1.__assign({}, this.options), {\n    context: null\n  });\n\n  return utils_1.domEach(this, function (el) {\n    if (!htmlparser2_1.DomUtils.hasChildren(el)) return;\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n    opts.context = el;\n    var content = utils_1.isCheerio(str) ? str.toArray() : parse_1.default(\"\" + str, opts, false).children;\n    parse_1.update(content, el);\n  });\n}\n\nexports.html = html;\n/**\n * Turns the collection to a string. Alias for `.html()`.\n *\n * @category Manipulation\n * @returns The rendered document.\n */\n\nfunction toString() {\n  return static_1.html(this, this.options);\n}\n\nexports.toString = toString;\n\nfunction text(str) {\n  var _this = this; // If `str` is undefined, act as a \"getter\"\n\n\n  if (str === undefined) {\n    return static_1.text(this);\n  }\n\n  if (typeof str === 'function') {\n    // Function support\n    return utils_1.domEach(this, function (el, i) {\n      text.call(_this._make(el), str.call(el, i, static_1.text([el])));\n    });\n  } // Append text node to each selected elements\n\n\n  return utils_1.domEach(this, function (el) {\n    if (!htmlparser2_1.DomUtils.hasChildren(el)) return;\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n    var textNode = new domhandler_2.Text(str);\n    parse_1.update(textNode, el);\n  });\n}\n\nexports.text = text;\n/**\n * Clone the cheerio object.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const moreFruit = $('#fruits').clone();\n * ```\n *\n * @returns The cloned object.\n * @see {@link https://api.jquery.com/clone/}\n */\n\nfunction clone() {\n  return this._make(utils_1.cloneDom(this.get()));\n}\n\nexports.clone = clone;","map":{"version":3,"names":["Object","defineProperty","exports","value","clone","text","toString","html","empty","replaceWith","remove","insertBefore","before","insertAfter","after","wrapAll","unwrap","wrapInner","wrap","prepend","append","prependTo","appendTo","_makeDomArray","tslib_1","require","domhandler_1","domhandler_2","parse_1","__importStar","static_1","utils_1","htmlparser2_1","elem","_this","isCheerio","cloneDom","get","Array","isArray","reduce","newElems","el","concat","default","options","children","_insert","concatenator","elems","_i","arguments","length","lastIdx","domEach","i","hasChildren","domSrc","call","dom","uniqueSplice","array","spliceIdx","spliceCount","parent","_a","_b","spliceArgs","__spreadArray","prev","next","idx","node","oldParent","prevIdx","indexOf","splice","apply","target","appendTarget","_make","prependTarget","_wrap","insert","wrapper","lastParent","parents","last","wrap_1","isHtml","find","wrapperDom","DomUtils","elInsertLocation","j","child","isTag","siblings","index","update","selector","not","each","_","wrap_2","type","clones","forEach","clonedSelf","toArray","push","targetArr","filter","removeElement","content","cont","includes","str","undefined","opts","__assign","context","textNode","Text"],"sources":["/Users/sebas/Desktop/robofriends-testing/node_modules/cheerio/lib/api/manipulation.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clone = exports.text = exports.toString = exports.html = exports.empty = exports.replaceWith = exports.remove = exports.insertBefore = exports.before = exports.insertAfter = exports.after = exports.wrapAll = exports.unwrap = exports.wrapInner = exports.wrap = exports.prepend = exports.append = exports.prependTo = exports.appendTo = exports._makeDomArray = void 0;\nvar tslib_1 = require(\"tslib\");\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Methods for modifying the DOM structure.\n *\n * @module cheerio/manipulation\n */\nvar domhandler_2 = require(\"domhandler\");\nvar parse_1 = tslib_1.__importStar(require(\"../parse\"));\nvar static_1 = require(\"../static\");\nvar utils_1 = require(\"../utils\");\nvar htmlparser2_1 = require(\"htmlparser2\");\n/**\n * Create an array of nodes, recursing into arrays and parsing strings if necessary.\n *\n * @private\n * @category Manipulation\n * @param elem - Elements to make an array of.\n * @param clone - Optionally clone nodes.\n * @returns The array of nodes.\n */\nfunction _makeDomArray(elem, clone) {\n    var _this = this;\n    if (elem == null) {\n        return [];\n    }\n    if (utils_1.isCheerio(elem)) {\n        return clone ? utils_1.cloneDom(elem.get()) : elem.get();\n    }\n    if (Array.isArray(elem)) {\n        return elem.reduce(function (newElems, el) { return newElems.concat(_this._makeDomArray(el, clone)); }, []);\n    }\n    if (typeof elem === 'string') {\n        return parse_1.default(elem, this.options, false).children;\n    }\n    return clone ? utils_1.cloneDom([elem]) : [elem];\n}\nexports._makeDomArray = _makeDomArray;\nfunction _insert(concatenator) {\n    return function () {\n        var _this = this;\n        var elems = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            elems[_i] = arguments[_i];\n        }\n        var lastIdx = this.length - 1;\n        return utils_1.domEach(this, function (el, i) {\n            if (!domhandler_1.hasChildren(el))\n                return;\n            var domSrc = typeof elems[0] === 'function'\n                ? elems[0].call(el, i, static_1.html(el.children))\n                : elems;\n            var dom = _this._makeDomArray(domSrc, i < lastIdx);\n            concatenator(dom, el.children, el);\n        });\n    };\n}\n/**\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @private\n * @category Manipulation\n * @param array - Target array to splice.\n * @param spliceIdx - Index at which to begin changing the array.\n * @param spliceCount - Number of elements to remove from the array.\n * @param newElems - Elements to insert into the array.\n * @param parent - The parent of the node.\n * @returns The spliced array.\n */\nfunction uniqueSplice(array, spliceIdx, spliceCount, newElems, parent) {\n    var _a, _b;\n    var spliceArgs = tslib_1.__spreadArray([\n        spliceIdx,\n        spliceCount\n    ], newElems);\n    var prev = array[spliceIdx - 1] || null;\n    var next = array[spliceIdx + spliceCount] || null;\n    /*\n     * Before splicing in new elements, ensure they do not already appear in the\n     * current array.\n     */\n    for (var idx = 0; idx < newElems.length; ++idx) {\n        var node = newElems[idx];\n        var oldParent = node.parent;\n        if (oldParent) {\n            var prevIdx = oldParent.children.indexOf(newElems[idx]);\n            if (prevIdx > -1) {\n                oldParent.children.splice(prevIdx, 1);\n                if (parent === oldParent && spliceIdx > prevIdx) {\n                    spliceArgs[0]--;\n                }\n            }\n        }\n        node.parent = parent;\n        if (node.prev) {\n            node.prev.next = (_a = node.next) !== null && _a !== void 0 ? _a : null;\n        }\n        if (node.next) {\n            node.next.prev = (_b = node.prev) !== null && _b !== void 0 ? _b : null;\n        }\n        node.prev = newElems[idx - 1] || prev;\n        node.next = newElems[idx + 1] || next;\n    }\n    if (prev) {\n        prev.next = newElems[0];\n    }\n    if (next) {\n        next.prev = newElems[newElems.length - 1];\n    }\n    return array.splice.apply(array, spliceArgs);\n}\n/**\n * Insert every element in the set of matched elements to the end of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').appendTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to append elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/appendTo/}\n */\nfunction appendTo(target) {\n    var appendTarget = utils_1.isCheerio(target) ? target : this._make(target);\n    appendTarget.append(this);\n    return this;\n}\nexports.appendTo = appendTo;\n/**\n * Insert every element in the set of matched elements to the beginning of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').prependTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to prepend elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/prependTo/}\n */\nfunction prependTo(target) {\n    var prependTarget = utils_1.isCheerio(target) ? target : this._make(target);\n    prependTarget.prepend(this);\n    return this;\n}\nexports.prependTo = prependTo;\n/**\n * Inserts content as the *last* child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').append('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/append/}\n */\nexports.append = _insert(function (dom, children, parent) {\n    uniqueSplice(children, children.length, 0, dom, parent);\n});\n/**\n * Inserts content as the *first* child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').prepend('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/prepend/}\n */\nexports.prepend = _insert(function (dom, children, parent) {\n    uniqueSplice(children, 0, 0, dom, parent);\n});\nfunction _wrap(insert) {\n    return function (wrapper) {\n        var lastIdx = this.length - 1;\n        var lastParent = this.parents().last();\n        for (var i = 0; i < this.length; i++) {\n            var el = this[i];\n            var wrap_1 = typeof wrapper === 'function'\n                ? wrapper.call(el, i, el)\n                : typeof wrapper === 'string' && !utils_1.isHtml(wrapper)\n                    ? lastParent.find(wrapper).clone()\n                    : wrapper;\n            var wrapperDom = this._makeDomArray(wrap_1, i < lastIdx)[0];\n            if (!wrapperDom || !htmlparser2_1.DomUtils.hasChildren(wrapperDom))\n                continue;\n            var elInsertLocation = wrapperDom;\n            /*\n             * Find the deepest child. Only consider the first tag child of each node\n             * (ignore text); stop if no children are found.\n             */\n            var j = 0;\n            while (j < elInsertLocation.children.length) {\n                var child = elInsertLocation.children[j];\n                if (utils_1.isTag(child)) {\n                    elInsertLocation = child;\n                    j = 0;\n                }\n                else {\n                    j++;\n                }\n            }\n            insert(el, elInsertLocation, [wrapperDom]);\n        }\n        return this;\n    };\n}\n/**\n * The .wrap() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. A\n * copy of this structure will be wrapped around each of the elements in the set\n * of matched elements. This method returns the original set of elements for\n * chaining purposes.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrap(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"red-fruit\">\n * //      <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrap(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"healthy\">\n * //       <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //       <li class=\"orange\">Orange</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //        <li class=\"plum\">Plum</li>\n * //     </div>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around each element in the selection.\n * @see {@link https://api.jquery.com/wrap/}\n */\nexports.wrap = _wrap(function (el, elInsertLocation, wrapperDom) {\n    var parent = el.parent;\n    if (!parent)\n        return;\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n    parse_1.update([el], elInsertLocation);\n    /*\n     * The previous operation removed the current element from the `siblings`\n     * array, so the `dom` array can be inserted without removing any\n     * additional elements.\n     */\n    uniqueSplice(siblings, index, 0, wrapperDom, parent);\n});\n/**\n * The .wrapInner() function can take any string or object that could be passed\n * to the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around the content of each of the elements in the\n * set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrapInner(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"red-fruit\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"pear\">Pear</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrapInner(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"healthy\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">\n * //       <div class=\"healthy\">Orange</div>\n * //     </li>\n * //     <li class=\"pear\">\n * //       <div class=\"healthy\">Pear</div>\n * //     </li>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around the content of each element\n *   in the selection.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/wrapInner/}\n */\nexports.wrapInner = _wrap(function (el, elInsertLocation, wrapperDom) {\n    if (!domhandler_1.hasChildren(el))\n        return;\n    parse_1.update(el.children, elInsertLocation);\n    parse_1.update(wrapperDom, el);\n});\n/**\n * The .unwrap() function, removes the parents of the set of matched elements\n * from the DOM, leaving the matched elements in their place.\n *\n * @category Manipulation\n * @example <caption>without selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <div><p>Hello</p></div>\\n  <div><p>World</p></div>\\n</div>'\n * );\n * $('#test p').unwrap();\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @example <caption>with selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <p>Hello</p>\\n  <b><p>World</p></b>\\n</div>'\n * );\n * $('#test p').unwrap('b');\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @param selector - A selector to check the parent element against. If an\n *   element's parent does not match the selector, the element won't be unwrapped.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/unwrap/}\n */\nfunction unwrap(selector) {\n    var _this = this;\n    this.parent(selector)\n        .not('body')\n        .each(function (_, el) {\n        _this._make(el).replaceWith(el.children);\n    });\n    return this;\n}\nexports.unwrap = unwrap;\n/**\n * The .wrapAll() function can take any string or object that could be passed to\n * the $() function to specify a DOM structure. This structure may be nested\n * several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around all of the elements in the set of matched\n * elements, as a single group.\n *\n * @category Manipulation\n * @example <caption>With markup passed to `wrapAll`</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div class=\"container\"><div class=\"inner\">First</div><div class=\"inner\">Second</div></div>'\n * );\n * $('.inner').wrapAll(\"<div class='new'></div>\");\n *\n * //=> <div class=\"container\">\n * //     <div class='new'>\n * //       <div class=\"inner\">First</div>\n * //       <div class=\"inner\">Second</div>\n * //     </div>\n * //   </div>\n * ```\n *\n * @example <caption>With an existing cheerio instance</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<span>Span 1</span><strong>Strong</strong><span>Span 2</span>'\n * );\n * const wrap = $('<div><p><em><b></b></em></p></div>');\n * $('span').wrapAll(wrap);\n *\n * //=> <div>\n * //     <p>\n * //       <em>\n * //         <b>\n * //           <span>Span 1</span>\n * //           <span>Span 2</span>\n * //         </b>\n * //       </em>\n * //     </p>\n * //   </div>\n * //   <strong>Strong</strong>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around all matched elements in the\n *   selection.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/wrapAll/}\n */\nfunction wrapAll(wrapper) {\n    var el = this[0];\n    if (el) {\n        var wrap_2 = this._make(typeof wrapper === 'function' ? wrapper.call(el, 0, el) : wrapper).insertBefore(el);\n        // If html is given as wrapper, wrap may contain text elements\n        var elInsertLocation = void 0;\n        for (var i = 0; i < wrap_2.length; i++) {\n            if (wrap_2[i].type === 'tag')\n                elInsertLocation = wrap_2[i];\n        }\n        var j = 0;\n        /*\n         * Find the deepest child. Only consider the first tag child of each node\n         * (ignore text); stop if no children are found.\n         */\n        while (elInsertLocation && j < elInsertLocation.children.length) {\n            var child = elInsertLocation.children[j];\n            if (child.type === 'tag') {\n                elInsertLocation = child;\n                j = 0;\n            }\n            else {\n                j++;\n            }\n        }\n        if (elInsertLocation)\n            this._make(elInsertLocation).append(this);\n    }\n    return this;\n}\nexports.wrapAll = wrapAll;\n/* eslint-disable jsdoc/check-param-names*/\n/**\n * Insert content next to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').after('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert after each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/after/}\n */\nfunction after() {\n    var _this = this;\n    var elems = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        elems[_i] = arguments[_i];\n    }\n    var lastIdx = this.length - 1;\n    return utils_1.domEach(this, function (el, i) {\n        var parent = el.parent;\n        if (!htmlparser2_1.DomUtils.hasChildren(el) || !parent) {\n            return;\n        }\n        var siblings = parent.children;\n        var index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        var domSrc = typeof elems[0] === 'function'\n            ? elems[0].call(el, i, static_1.html(el.children))\n            : elems;\n        var dom = _this._makeDomArray(domSrc, i < lastIdx);\n        // Add element after `this` element\n        uniqueSplice(siblings, index + 1, 0, dom, parent);\n    });\n}\nexports.after = after;\n/* eslint-enable jsdoc/check-param-names*/\n/**\n * Insert every element in the set of matched elements after the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertAfter('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements after.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertAfter/}\n */\nfunction insertAfter(target) {\n    var _this = this;\n    if (typeof target === 'string') {\n        target = this._make(target);\n    }\n    this.remove();\n    var clones = [];\n    this._makeDomArray(target).forEach(function (el) {\n        var clonedSelf = _this.clone().toArray();\n        var parent = el.parent;\n        if (!parent) {\n            return;\n        }\n        var siblings = parent.children;\n        var index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        // Add cloned `this` element(s) after target element\n        uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n        clones.push.apply(clones, clonedSelf);\n    });\n    return this._make(clones);\n}\nexports.insertAfter = insertAfter;\n/* eslint-disable jsdoc/check-param-names*/\n/**\n * Insert content previous to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').before('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert before each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/before/}\n */\nfunction before() {\n    var _this = this;\n    var elems = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        elems[_i] = arguments[_i];\n    }\n    var lastIdx = this.length - 1;\n    return utils_1.domEach(this, function (el, i) {\n        var parent = el.parent;\n        if (!htmlparser2_1.DomUtils.hasChildren(el) || !parent) {\n            return;\n        }\n        var siblings = parent.children;\n        var index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        var domSrc = typeof elems[0] === 'function'\n            ? elems[0].call(el, i, static_1.html(el.children))\n            : elems;\n        var dom = _this._makeDomArray(domSrc, i < lastIdx);\n        // Add element before `el` element\n        uniqueSplice(siblings, index, 0, dom, parent);\n    });\n}\nexports.before = before;\n/* eslint-enable jsdoc/check-param-names*/\n/**\n * Insert every element in the set of matched elements before the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertBefore('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements before.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertBefore/}\n */\nfunction insertBefore(target) {\n    var _this = this;\n    var targetArr = this._make(target);\n    this.remove();\n    var clones = [];\n    utils_1.domEach(targetArr, function (el) {\n        var clonedSelf = _this.clone().toArray();\n        var parent = el.parent;\n        if (!parent) {\n            return;\n        }\n        var siblings = parent.children;\n        var index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        // Add cloned `this` element(s) after target element\n        uniqueSplice(siblings, index, 0, clonedSelf, parent);\n        clones.push.apply(clones, clonedSelf);\n    });\n    return this._make(clones);\n}\nexports.insertBefore = insertBefore;\n/**\n * Removes the set of matched elements from the DOM and all their children.\n * `selector` filters the set of matched elements to be removed.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.pear').remove();\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //    </ul>\n * ```\n *\n * @param selector - Optional selector for elements to remove.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/remove/}\n */\nfunction remove(selector) {\n    // Filter if we have selector\n    var elems = selector ? this.filter(selector) : this;\n    utils_1.domEach(elems, function (el) {\n        htmlparser2_1.DomUtils.removeElement(el);\n        el.prev = el.next = el.parent = null;\n    });\n    return this;\n}\nexports.remove = remove;\n/**\n * Replaces matched elements with `content`.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const plum = $('<li class=\"plum\">Plum</li>');\n * $('.pear').replaceWith(plum);\n * $.html();\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">Apple</li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n * ```\n *\n * @param content - Replacement for matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/replaceWith/}\n */\nfunction replaceWith(content) {\n    var _this = this;\n    return utils_1.domEach(this, function (el, i) {\n        var parent = el.parent;\n        if (!parent) {\n            return;\n        }\n        var siblings = parent.children;\n        var cont = typeof content === 'function' ? content.call(el, i, el) : content;\n        var dom = _this._makeDomArray(cont);\n        /*\n         * In the case that `dom` contains nodes that already exist in other\n         * structures, ensure those nodes are properly removed.\n         */\n        parse_1.update(dom, null);\n        var index = siblings.indexOf(el);\n        // Completely remove old element\n        uniqueSplice(siblings, index, 1, dom, parent);\n        if (!dom.includes(el)) {\n            el.parent = el.prev = el.next = null;\n        }\n    });\n}\nexports.replaceWith = replaceWith;\n/**\n * Empties an element, removing all its children.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').empty();\n * $.html();\n * //=>  <ul id=\"fruits\"></ul>\n * ```\n *\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/empty/}\n */\nfunction empty() {\n    return utils_1.domEach(this, function (el) {\n        if (!htmlparser2_1.DomUtils.hasChildren(el))\n            return;\n        el.children.forEach(function (child) {\n            child.next = child.prev = child.parent = null;\n        });\n        el.children.length = 0;\n    });\n}\nexports.empty = empty;\nfunction html(str) {\n    if (str === undefined) {\n        var el = this[0];\n        if (!el || !htmlparser2_1.DomUtils.hasChildren(el))\n            return null;\n        return static_1.html(el.children, this.options);\n    }\n    // Keep main options unchanged\n    var opts = tslib_1.__assign(tslib_1.__assign({}, this.options), { context: null });\n    return utils_1.domEach(this, function (el) {\n        if (!htmlparser2_1.DomUtils.hasChildren(el))\n            return;\n        el.children.forEach(function (child) {\n            child.next = child.prev = child.parent = null;\n        });\n        opts.context = el;\n        var content = utils_1.isCheerio(str)\n            ? str.toArray()\n            : parse_1.default(\"\" + str, opts, false).children;\n        parse_1.update(content, el);\n    });\n}\nexports.html = html;\n/**\n * Turns the collection to a string. Alias for `.html()`.\n *\n * @category Manipulation\n * @returns The rendered document.\n */\nfunction toString() {\n    return static_1.html(this, this.options);\n}\nexports.toString = toString;\nfunction text(str) {\n    var _this = this;\n    // If `str` is undefined, act as a \"getter\"\n    if (str === undefined) {\n        return static_1.text(this);\n    }\n    if (typeof str === 'function') {\n        // Function support\n        return utils_1.domEach(this, function (el, i) {\n            text.call(_this._make(el), str.call(el, i, static_1.text([el])));\n        });\n    }\n    // Append text node to each selected elements\n    return utils_1.domEach(this, function (el) {\n        if (!htmlparser2_1.DomUtils.hasChildren(el))\n            return;\n        el.children.forEach(function (child) {\n            child.next = child.prev = child.parent = null;\n        });\n        var textNode = new domhandler_2.Text(str);\n        parse_1.update(textNode, el);\n    });\n}\nexports.text = text;\n/**\n * Clone the cheerio object.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const moreFruit = $('#fruits').clone();\n * ```\n *\n * @returns The cloned object.\n * @see {@link https://api.jquery.com/clone/}\n */\nfunction clone() {\n    return this._make(utils_1.cloneDom(this.get()));\n}\nexports.clone = clone;\n"],"mappings":"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BmD,gBAArB;EACA;AACJ;AACA;AACA;AACA;;EACIjC,YAAY,CAACqC,QAAD,EAAWC,KAAX,EAAkB,CAAlB,EAAqBP,UAArB,EAAiC3B,MAAjC,CAAZ;AACH,CAbmB,CAApB;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA9D,OAAO,CAACe,SAAR,GAAoBiE,KAAK,CAAC,UAAUxC,EAAV,EAAcmD,gBAAd,EAAgCF,UAAhC,EAA4C;EAClE,IAAI,CAACjE,YAAY,CAAC8B,WAAb,CAAyBd,EAAzB,CAAL,EACI;EACJd,OAAO,CAACuE,MAAR,CAAezD,EAAE,CAACI,QAAlB,EAA4B+C,gBAA5B;EACAjE,OAAO,CAACuE,MAAR,CAAeR,UAAf,EAA2BjD,EAA3B;AACH,CALwB,CAAzB;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS1B,MAAT,CAAgBoF,QAAhB,EAA0B;EACtB,IAAIlE,KAAK,GAAG,IAAZ;;EACA,KAAK8B,MAAL,CAAYoC,QAAZ,EACKC,GADL,CACS,MADT,EAEKC,IAFL,CAEU,UAAUC,CAAV,EAAa7D,EAAb,EAAiB;IACvBR,KAAK,CAAC8C,KAAN,CAAYtC,EAAZ,EAAgBjC,WAAhB,CAA4BiC,EAAE,CAACI,QAA/B;EACH,CAJD;EAKA,OAAO,IAAP;AACH;;AACD5C,OAAO,CAACc,MAAR,GAAiBA,MAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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"},"metadata":{},"sourceType":"script"}