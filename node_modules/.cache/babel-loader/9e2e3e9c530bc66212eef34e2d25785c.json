{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\n\nvar has = require('has');\n\nvar isMatchRecord = require('./isMatchRecord');\n\nvar predicates = {\n  // https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type\n  'Property Descriptor': function isPropertyDescriptor(Desc) {\n    var allowed = {\n      '[[Configurable]]': true,\n      '[[Enumerable]]': true,\n      '[[Get]]': true,\n      '[[Set]]': true,\n      '[[Value]]': true,\n      '[[Writable]]': true\n    };\n\n    for (var key in Desc) {\n      // eslint-disable-line\n      if (has(Desc, key) && !allowed[key]) {\n        return false;\n      }\n    }\n\n    var isData = has(Desc, '[[Value]]');\n    var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');\n\n    if (isData && IsAccessor) {\n      throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');\n    }\n\n    return true;\n  },\n  // https://262.ecma-international.org/13.0/#sec-match-records\n  'Match Record': isMatchRecord\n};\n\nmodule.exports = function assertRecord(Type, recordType, argumentName, value) {\n  var predicate = predicates[recordType];\n\n  if (typeof predicate !== 'function') {\n    throw new $SyntaxError('unknown record type: ' + recordType);\n  }\n\n  if (Type(value) !== 'Object' || !predicate(value)) {\n    throw new $TypeError(argumentName + ' must be a ' + recordType);\n  }\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","$SyntaxError","has","isMatchRecord","predicates","isPropertyDescriptor","Desc","allowed","key","isData","IsAccessor","module","exports","assertRecord","Type","recordType","argumentName","value","predicate"],"sources":["/Users/sebas/Desktop/robofriends-testing/node_modules/es-abstract/helpers/assertRecord.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\n\nvar has = require('has');\n\nvar isMatchRecord = require('./isMatchRecord');\n\nvar predicates = {\n\t// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type\n\t'Property Descriptor': function isPropertyDescriptor(Desc) {\n\t\tvar allowed = {\n\t\t\t'[[Configurable]]': true,\n\t\t\t'[[Enumerable]]': true,\n\t\t\t'[[Get]]': true,\n\t\t\t'[[Set]]': true,\n\t\t\t'[[Value]]': true,\n\t\t\t'[[Writable]]': true\n\t\t};\n\n\t\tfor (var key in Desc) { // eslint-disable-line\n\t\t\tif (has(Desc, key) && !allowed[key]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tvar isData = has(Desc, '[[Value]]');\n\t\tvar IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');\n\t\tif (isData && IsAccessor) {\n\t\t\tthrow new $TypeError('Property Descriptors may not be both accessor and data descriptors');\n\t\t}\n\t\treturn true;\n\t},\n\t// https://262.ecma-international.org/13.0/#sec-match-records\n\t'Match Record': isMatchRecord\n};\n\nmodule.exports = function assertRecord(Type, recordType, argumentName, value) {\n\tvar predicate = predicates[recordType];\n\tif (typeof predicate !== 'function') {\n\t\tthrow new $SyntaxError('unknown record type: ' + recordType);\n\t}\n\tif (Type(value) !== 'Object' || !predicate(value)) {\n\t\tthrow new $TypeError(argumentName + ' must be a ' + recordType);\n\t}\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;AACA,IAAIG,YAAY,GAAGH,YAAY,CAAC,eAAD,CAA/B;;AAEA,IAAII,GAAG,GAAGH,OAAO,CAAC,KAAD,CAAjB;;AAEA,IAAII,aAAa,GAAGJ,OAAO,CAAC,iBAAD,CAA3B;;AAEA,IAAIK,UAAU,GAAG;EAChB;EACA,uBAAuB,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;IAC1D,IAAIC,OAAO,GAAG;MACb,oBAAoB,IADP;MAEb,kBAAkB,IAFL;MAGb,WAAW,IAHE;MAIb,WAAW,IAJE;MAKb,aAAa,IALA;MAMb,gBAAgB;IANH,CAAd;;IASA,KAAK,IAAIC,GAAT,IAAgBF,IAAhB,EAAsB;MAAE;MACvB,IAAIJ,GAAG,CAACI,IAAD,EAAOE,GAAP,CAAH,IAAkB,CAACD,OAAO,CAACC,GAAD,CAA9B,EAAqC;QACpC,OAAO,KAAP;MACA;IACD;;IAED,IAAIC,MAAM,GAAGP,GAAG,CAACI,IAAD,EAAO,WAAP,CAAhB;IACA,IAAII,UAAU,GAAGR,GAAG,CAACI,IAAD,EAAO,SAAP,CAAH,IAAwBJ,GAAG,CAACI,IAAD,EAAO,SAAP,CAA5C;;IACA,IAAIG,MAAM,IAAIC,UAAd,EAA0B;MACzB,MAAM,IAAIV,UAAJ,CAAe,oEAAf,CAAN;IACA;;IACD,OAAO,IAAP;EACA,CAxBe;EAyBhB;EACA,gBAAgBG;AA1BA,CAAjB;;AA6BAQ,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,UAA5B,EAAwCC,YAAxC,EAAsDC,KAAtD,EAA6D;EAC7E,IAAIC,SAAS,GAAGd,UAAU,CAACW,UAAD,CAA1B;;EACA,IAAI,OAAOG,SAAP,KAAqB,UAAzB,EAAqC;IACpC,MAAM,IAAIjB,YAAJ,CAAiB,0BAA0Bc,UAA3C,CAAN;EACA;;EACD,IAAID,IAAI,CAACG,KAAD,CAAJ,KAAgB,QAAhB,IAA4B,CAACC,SAAS,CAACD,KAAD,CAA1C,EAAmD;IAClD,MAAM,IAAIjB,UAAJ,CAAegB,YAAY,GAAG,aAAf,GAA+BD,UAA9C,CAAN;EACA;AACD,CARD"},"metadata":{},"sourceType":"script"}